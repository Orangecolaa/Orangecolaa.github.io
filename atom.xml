<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orangecola</title>
  
  <subtitle>I am your Orangecola</subtitle>
  <link href="https://www.orangecola.cn/atom.xml" rel="self"/>
  
  <link href="https://www.orangecola.cn/"/>
  <updated>2021-10-02T08:24:28.042Z</updated>
  <id>https://www.orangecola.cn/</id>
  
  <author>
    <name>Orange cola</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何将Python程序打包</title>
    <link href="https://www.orangecola.cn/posts/ad99f8c1/"/>
    <id>https://www.orangecola.cn/posts/ad99f8c1/</id>
    <published>2021-10-03T14:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>将python程序打包成exe文件，可以使用pyinstaller模块实现将python项目打包成exe文件。</p><p>1.安装pyinstaller模块</p><p>在pycharm中操作：file–&gt;setting–&gt;Project: xxx–&gt;Project interpretor，再点击+即可。</p><p>2.在pycharm的Terminal终端输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F XXX.PY</span><br></pre></td></tr></table></figure><p>【提示】相关参数</p><p>–icon=图标路径 （pyinstaller -F –icon=pytt.ico xxx.py) ：更换图标</p><p>-F 打包成一个exe文件</p><p>-w 使用窗口，无控制台</p><p>-c 使用控制台，无窗口</p><p>-D 创建一个目录，里面包含exe以及其他一些依赖性文件</p><p>3.在项目的dist目录下可以看到生成的exe文件，可直接在windows系统中使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://www.orangecola.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.orangecola.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop基础模式搭建</title>
    <link href="https://www.orangecola.cn/posts/a250e24a/"/>
    <id>https://www.orangecola.cn/posts/a250e24a/</id>
    <published>2021-10-02T16:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、关于Hadoop"><a href="#一、关于Hadoop" class="headerlink" title="一、关于Hadoop"></a>一、关于Hadoop</h2><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。</p><p><strong>Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。</strong></p><p>HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。</p><p><strong>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。</strong></p><p><strong>Hadoop解决哪些问题？</strong></p><ul><li><p>海量数据需要及时分析和处理</p></li><li><p>海量数据需要深入分析和挖掘</p></li><li><p>数据需要长期保存</p></li></ul><p><strong>海量数据存储的问题：</strong></p><ul><li><p>磁盘IO称为一种瓶颈，而非CPU资源</p></li><li><p>网络带宽是一种稀缺资源</p></li><li><p>硬件故障成为影响稳定的一大因素</p></li></ul><p><strong>HDFS采用master/slave架构</strong></p><p><strong>Hadoop的三种运行模式 ：</strong></p><blockquote><ol><li><p>独立（本地）运行模式：无需任何守护进程，所有的程序都运行在同一个JVM上执行。在独立模式下调试MR程序非常高效方便。所以一般该模式主要是在学习或者开发阶段调试使用 。</p></li><li><p>伪分布式模式：  Hadoop守护进程运行在本地机器上，模拟一个小规模的集群，换句话说，可以配置一台机器的Hadoop集群,伪分布式是完全分布式的一个特例。</p></li><li><p>完全分布式模式：Hadoop守护进程运行在一个集群上。</p></li></ol></blockquote><p><strong>HDFS的主要模块</strong></p><ol><li><p>NameNode:</p><p>功能：是整个文件系统的管理节点。维护整个文件系统的文件目录数，文件/目录的源数据和每个文件对应的数据快列表。用于接受用户的请求。</p></li><li><p>DataNode:</p><p>是HA（高可用性）的一个解决方案，是备用镜像，但不支持热设备</p></li></ol><p><strong>注意：</strong>在本地模式下,将使用本地文件系统和本地MapReduce运行器。在分布式模式下，将启动HDFS和YARN守护进程。</p><h2 id="二、hadoop本地模式"><a href="#二、hadoop本地模式" class="headerlink" title="二、hadoop本地模式"></a>二、hadoop本地模式</h2><ol><li><p><strong>首先下载jdk和hadoop包。</strong></p><p>hadoop-2.6.0.tar.gz</p><p>jdk-8u144-linux-x64.tar.gz</p><p>百度云：<a href="https://pan.baidu.com/s/15QXS1ScOG1kOHBOCalgq7Q">https://pan.baidu.com/s/15QXS1ScOG1kOHBOCalgq7Q</a><br>提取码：1dc7</p></li><li><p><strong>上传包到虚拟机并解压</strong></p><p>使用ftp软件连接虚拟机，将下载的jdk和hadoop包上传到虚拟机中。</p><p>将两个包解压到/root/hadoop_sft</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-2.6.0.tar.gz -C /root/hadoop_sft</span><br><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /root/hadoop_sft</span><br></pre></td></tr></table></figure></li><li><p><strong>配置信息</strong></p><p>本地模式有2个文件修改配置</p><ol><li><p>修改 .bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">HADOOP_HOME=/root/hadoop_sft/hadoop-2.6.0</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME</span><br><span class="line"></span><br><span class="line">PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>接下来使修改生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>修改hadoop-env.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>修改第25行export JAVA_HOME=${JAVA_HOME}，将${JAVA_HOME}替换成jdk的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>进行测试</strong></p><ol><li><p>先在/root/下建一个t1.txt 文本文件，往里面放入包含不同单词。</p></li><li><p>cd切换到mapreduce目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/share/hadoop/mapreduce/</span><br></pre></td></tr></table></figure></li><li><p>执行jar包里的wordcount程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.6.0.jar wordcount /root/t1.txt ./out</span><br></pre></td></tr></table></figure></li><li><p>out目录生成part-r-00000和_SUCCESS两个文件，进入./out查看，part-r-00000文件可以看到分词情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./out</span><br><span class="line">cat part-r-00000</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、伪分布式模式"><a href="#三、伪分布式模式" class="headerlink" title="三、伪分布式模式"></a>三、伪分布式模式</h2><p>​    伪分布式模式在本地模式的基础上进行配置，本地模式已经做完一，二步，所有我们直接从第三步开始配置。</p><ol><li><p><strong>配置信息</strong></p><p>本地模式有6个文件修改配置</p><ol><li><p>修改 .bash_profile（本地模式改过了此处忽略）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">HADOOP_HOME=/root/hadoop_sft/hadoop-2.6.0</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME</span><br><span class="line"></span><br><span class="line">PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>接下来使修改生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>修改hadoop-env.sh（本地模式改过了此处忽略）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>修改第25行export JAVA_HOME=${JAVA_HOME}，将${JAVA_HOME}替换成jdk的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li><li><p>修改hdfs-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">.property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改core-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 先在hadoop-2.6.0目录中创建tmp文件夹</span></span><br><span class="line">mkdir tmp</span><br><span class="line">vim etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://(本机ip):9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop_sft/hadoop-2.6.0/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改mapred-site.xml</p><p>先将mapred-site.xml.template复制为mapred-site.xml放到同目录下，再编辑修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp etc/hadoop/mapred-site.xml.template etc/hadoop/mapred-site.xml</span><br><span class="line">vim etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>设置免密登录</strong></p><p>生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>测试免密登陆成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@(本机ip)</span><br></pre></td></tr></table></figure></li><li><p><strong>Hadoop的进行初始化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure></li><li><p><strong>启动服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>进行测试</strong></p><ol><li><p>先在/root/下建一个t1.txt 文本文件，往里面放入包含不同单词。</p></li><li><p>cd切换到mapreduce目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/share/hadoop/mapreduce/</span><br></pre></td></tr></table></figure></li><li><p>执行jar包里的wordcount程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.6.0.jar wordcount /root/t1.txt ./out</span><br></pre></td></tr></table></figure></li><li><p>out目录生成part-r-00000和_SUCCESS两个文件，进入./out查看，part-r-00000文件可以看到分词情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ./out</span><br><span class="line">ls</span><br><span class="line">cat part-r-00000</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="四、完全分布式"><a href="#四、完全分布式" class="headerlink" title="四、完全分布式"></a>四、完全分布式</h2><p>搭建分布式主要用三台虚拟机：hadoop01、hadoop02、hadoop03，所以我们将第一台虚拟机再克隆出两台，配置NAT网络，记下三台虚拟机的IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.171.129</span><br><span class="line">192.168.171.130</span><br><span class="line">192.168.171.131</span><br></pre></td></tr></table></figure><ol><li><p><strong>配置虚拟机的hostname</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>插入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=hadoop01</span><br></pre></td></tr></table></figure><p>修改hosts文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.171.129  hadoop01</span><br><span class="line">192.168.171.130  hadoop02</span><br><span class="line">192.168.171.131  hadoop03</span><br></pre></td></tr></table></figure><p><strong>需要把以上hosts配置到windows的hosts文件中，不然在windows开发时连接不上hdfs</strong></p></li><li><p><strong>设置免密登录</strong></p><p>给每一台虚拟机都生成设置免密登录</p><p>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>测试免密登陆成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@(本机ip)</span><br></pre></td></tr></table></figure><p>在.ssh文件夹下会有id_rsa与id_rsa.pub两个文件，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将公钥保存到认证文件中（认证文件名一定不能打错），最后将其余两台机器的公钥也复制进来，组成免密访问。</p><h2 id="余下待补充"><a href="#余下待补充" class="headerlink" title="余下待补充"></a>余下待补充</h2></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hadoop" scheme="https://www.orangecola.cn/categories/Hadoop/"/>
    
    
    <category term="Hadoop" scheme="https://www.orangecola.cn/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>深入理解TCP三次握手和四次挥手</title>
    <link href="https://www.orangecola.cn/posts/aedc73f1/"/>
    <id>https://www.orangecola.cn/posts/aedc73f1/</id>
    <published>2021-10-02T16:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>tcp协议是web开发最重要而又最基础的知识，那么tcp的三次握手和四次挥手理解了吗，接下来一起深入学习理解一下。</p><h2 id="TCP连接和断开整体图"><a href="#TCP连接和断开整体图" class="headerlink" title="TCP连接和断开整体图"></a>TCP连接和断开整体图</h2><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210712093707571.png" alt="image-20210712093707571"></p><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><ol><li><p>请求端（通常称为客户）发送一个SYN段指明客户打算连接的服务器的端口，以及初始序号（ISN，在这个例子中为1415531521）。这个SYN段为报文段1。</p></li><li><p>服务器发回包含服务器的初始序号的SYN报文段（报文段2作为应答。同时，将确认序号设置为客户的ISN加1以对客户的SYN报文段进行确认。一个SYN将占用一个序号。</p></li><li><p>客户必须将确认序号设置为服务器的ISN加1以对服务器的SYN报文段进行确认（报文段3）。这三个报文段完成连接的建立。这个过程也称为三次握手（ three-way handshake）。</p></li></ol><p><strong>问题一：第二次、第三次握手失败会怎么样？</strong></p><p>如果握手失败服务端会等待客户端重新连接，这时候服务端处于半关闭状态。如果出现大量的半关闭连接，会耗尽服务器的连接资源数，导致请求无法进来。也就是所谓的DDOS攻击。</p><h2 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h2><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210712094403688.png" alt="image-20210712094403688"></p><p><strong>整体流程如下：</strong></p><ol><li>客户端发起断开，向服务器发送FIN</li><li>当服务器收到这个FIN，它返回客户端ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</li><li>同时TCP服务器还向应用程序（即丢弃服务器）传送一个文件结束符。接着这个服务器程序就关闭它的连接，导致它的TCP端发送一个FIN，</li><li>客户必须返回一个ACK确认，并将确认序号设置为收到序号加1。</li></ol><p><strong>问题二：为什么需要四次挥手，两次挥手为什么不行？</strong></p><p>建立一个连接需要三次握手，而终止一个连接要经过4次握手。这由TCP的半关闭（halfclose）造成的。既然一个TCP连接是全双工（即数据在两个方向上能同时传递），因此每个方向必须单独地进行关闭。这原则就是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向连接。当一端收到一个FIN，它必须通知应用层另一端已经终止了那个方向的数据传送。<br>收到一个FIN只意味着在这一方向上没有数据流动。一个TCP连接在收到一个FIN后仍能发送数据。因此需要两个方向都收到FIN。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="TCP" scheme="https://www.orangecola.cn/categories/TCP/"/>
    
    <category term="网络基础" scheme="https://www.orangecola.cn/categories/TCP/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="TCP" scheme="https://www.orangecola.cn/tags/TCP/"/>
    
    <category term="网络基础" scheme="https://www.orangecola.cn/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python操作数据库</title>
    <link href="https://www.orangecola.cn/posts/a2ba319e/"/>
    <id>https://www.orangecola.cn/posts/a2ba319e/</id>
    <published>2021-10-02T15:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="操作SQLite3数据库"><a href="#操作SQLite3数据库" class="headerlink" title="操作SQLite3数据库"></a>操作SQLite3数据库</h2><p>python3标准库中内置了SQLite3模块，可以支持SQLite3数据库的访问和相关数据库操作。</p><h3 id="python操作SQLite3数据库的基本流程"><a href="#python操作SQLite3数据库的基本流程" class="headerlink" title="python操作SQLite3数据库的基本流程"></a>python操作SQLite3数据库的基本流程</h3><p>1.导入相关库或模块。</p><p>2.使用connect()连接数据库并获取数据库连接对象</p><p>connect提供的方法：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.cursor()</td><td align="center">创建一个游标对象</td></tr><tr><td align="center">.commit()</td><td align="center">处理事务提交</td></tr><tr><td align="center">.rollback()</td><td align="center">处理事务回滚</td></tr><tr><td align="center">.close()</td><td align="center">关闭一个数据库连接</td></tr></tbody></table><p>3.使用con.cursor()获取游标对象。</p><p>4.使用游标对象的方法(execute()、executemany()、fetchall()等)来操作数据库，实现插入、修改和删除操作，并查询获取显示相关的记录。</p><p>在python程序中，连接函数sqlite3.connect()有两个常用参数：</p><ul><li>database：表示要访问的数据库名。</li><li>timeout：表示访问数据的超时设定。</li></ul><p>5.使用close()关闭游标对象和数据库连接，数据库操作完成之后，必须关闭数据库连接，这样可以减轻数据库服务器压力。</p><h3 id="使用sqlite3创建表"><a href="#使用sqlite3创建表" class="headerlink" title="使用sqlite3创建表"></a>使用sqlite3创建表</h3><p>使用sqlite3模块的connect方法创建或打开数据库，需要指定数据库路径，不存在则会创建一个新的数据库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&#x27;e:/sqlitedb/first.db&#x27;</span>)</span><br></pre></td></tr></table></figure><p>例：使用sqlite3创建表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 执行sql创建表，编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;create table t_person(</span></span><br><span class="line"><span class="string">            pno INTEGER PRIMARY KEY autoincrement,</span></span><br><span class="line"><span class="string">            panme VARCHAR NOT NULL,</span></span><br><span class="line"><span class="string">            age INTEGER</span></span><br><span class="line"><span class="string">            )&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    print(<span class="string">&quot;创建表成功&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;创建失败&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用sqlite3插入数据"><a href="#使用sqlite3插入数据" class="headerlink" title="使用sqlite3插入数据"></a>使用sqlite3插入数据</h3><p>调用游标对象的execute()方法执行插入的sql，使用executemany()执行多条sql语句，使用executemany()比循环使用execute()执行多条sql语句效率高。</p><p>例1：使用sqlite3插入一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;insert into t_person(pname, age) values(?, ?)&quot;</span>   <span class="comment"># ? 为传值占位符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>))    <span class="comment"># 值需要用元组类型括起来</span></span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><p>例2：使用sqlite3插入多条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;insert into t_person(pname, age) values(?, ?)&quot;</span>   <span class="comment"># ? 为传值占位符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    <span class="comment"># 执行插入多条数据sql语句</span></span><br><span class="line">    cur.executemany(sql, [(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>), (<span class="string">&quot;小明&quot;</span>, <span class="number">24</span>), (<span class="string">&quot;无名&quot;</span>, <span class="number">25</span>)])  <span class="comment"># 多组值需要用列表类型括起来</span></span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入多条数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="使用sqlite3查询数据"><a href="#使用sqlite3查询数据" class="headerlink" title="使用sqlite3查询数据"></a>使用sqlite3查询数据</h3><p>游标对象提供了fetchall()和fetchone()方法查询数据库数据，fetchall()方法获得所有数据，返回一个列表，fetchone()方法获取其中一个结果，返回一个元组。</p><p>例1：fetchall()查询所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">&quot;select * from t_person&quot;</span>  <span class="comment"># sql查询语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询数据</span></span><br><span class="line">    person_all = cur.fetchall()  <span class="comment"># 返回一个列表</span></span><br><span class="line">    <span class="comment"># 遍历列表</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> person_all:</span><br><span class="line">        print(p)</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><p>例2：fetchone()查询一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">&quot;select * from t_person&quot;</span>  <span class="comment"># sql查询语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询数据</span></span><br><span class="line">    person_one = cur.fetchone()  <span class="comment"># 返回一个元组</span></span><br><span class="line">    print(person_one)</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="使用sqlite3修改或删除数据"><a href="#使用sqlite3修改或删除数据" class="headerlink" title="使用sqlite3修改或删除数据"></a>使用sqlite3修改或删除数据</h3><p>例1：修改一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写删除数据的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;update t_person set pname=? where pno=?&quot;</span>  <span class="comment"># sql修改语句，pno为第几条数据传值占位符</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;张宇&quot;</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;修改数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;修改数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><p>例2：删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写删除数据的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;delete from t_person where pno=?&quot;</span>  <span class="comment"># 删除语句，pno为第几条数据传值占位符</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="number">1</span>,))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;删除数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;删除数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="Python调用Pymysql库使用Mysql"><a href="#Python调用Pymysql库使用Mysql" class="headerlink" title="Python调用Pymysql库使用Mysql"></a>Python调用Pymysql库使用Mysql</h2><h3 id="python安装pymysql"><a href="#python安装pymysql" class="headerlink" title="python安装pymysql"></a>python安装pymysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库创建表"><a href="#操作Pymysql数据库创建表" class="headerlink" title="操作Pymysql数据库创建表"></a>操作Pymysql数据库创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        create table t_student(</span></span><br><span class="line"><span class="string">        son int primary key auto_increment,</span></span><br><span class="line"><span class="string">        sname varchar(30) not null,</span></span><br><span class="line"><span class="string">        age int(2),</span></span><br><span class="line"><span class="string">        score float(3, 1)</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行创建表的sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    print(<span class="string">&quot;创建表成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;创建失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库插入数据"><a href="#操作Pymysql数据库插入数据" class="headerlink" title="操作Pymysql数据库插入数据"></a>操作Pymysql数据库插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据插入的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        insert into t_student(sname, age, score) values(%s, %s, %s)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行插入一条数据的sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;小明&quot;</span>, <span class="number">23</span>, <span class="number">98.2</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库插入多条数据"><a href="#操作Pymysql数据库插入多条数据" class="headerlink" title="操作Pymysql数据库插入多条数据"></a>操作Pymysql数据库插入多条数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据插入的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        insert into t_student(sname, age, score) values(%s, %s, %s)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">args = [(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="number">98.2</span>), (<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>, <span class="number">99.4</span>)] <span class="comment"># 定义变量接收插入数据，用列表括起来</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行插入多条数据的sql语句</span></span><br><span class="line">    cur.executemany(sql, args)</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库查询所有数据"><a href="#操作Pymysql数据库查询所有数据" class="headerlink" title="操作Pymysql数据库查询所有数据"></a>操作Pymysql数据库查询所有数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据查询的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;select * from t_student where age&gt;=22&quot;</span>   <span class="comment"># 查询年龄大于等于22的数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行查询数据的sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询结果</span></span><br><span class="line">    results = cur.fetchall()    <span class="comment"># 查询所有多条数据方法</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        sno = r[<span class="number">0</span>]</span><br><span class="line">        sname = r[<span class="number">1</span>]</span><br><span class="line">        age = r[<span class="number">2</span>]</span><br><span class="line">        score = r[<span class="number">3</span>]</span><br><span class="line">        print(<span class="string">&quot;sno:&quot;</span>, sno, <span class="string">&quot;sname:&quot;</span>, sname, <span class="string">&quot;age:&quot;</span>, age, <span class="string">&quot;score:&quot;</span>, score)</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库查询一条数据"><a href="#操作Pymysql数据库查询一条数据" class="headerlink" title="操作Pymysql数据库查询一条数据"></a>操作Pymysql数据库查询一条数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据查询的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;select * from t_student where age&gt;=22&quot;</span>   <span class="comment"># 查询年龄大于等于22的数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行查询数据的sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询结果</span></span><br><span class="line">    results = cur.fetchone()    <span class="comment"># 查询一条数据方法</span></span><br><span class="line">    print(<span class="string">&quot;sno:&quot;</span>, results[<span class="number">0</span>], <span class="string">&quot;sname:&quot;</span>, results[<span class="number">1</span>], <span class="string">&quot;age:&quot;</span>, results[<span class="number">2</span>], <span class="string">&quot;score:&quot;</span>, results[<span class="number">3</span>])</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库修改数据"><a href="#操作Pymysql数据库修改数据" class="headerlink" title="操作Pymysql数据库修改数据"></a>操作Pymysql数据库修改数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据修改的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;update t_student set sname=%s where sno=%s&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行修改数据的sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;五方&quot;</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;修改数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;修改数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库删除数据"><a href="#操作Pymysql数据库删除数据" class="headerlink" title="操作Pymysql数据库删除数据"></a>操作Pymysql数据库删除数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据删除的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;delete from t_student where sname=%s&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行删除数据的sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;五方&quot;</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;删除数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;删除数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://www.orangecola.cn/categories/Python/"/>
    
    <category term="数据库" scheme="https://www.orangecola.cn/categories/Python/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Python" scheme="https://www.orangecola.cn/tags/Python/"/>
    
    <category term="Mysql" scheme="https://www.orangecola.cn/tags/Mysql/"/>
    
    <category term="SQLite3" scheme="https://www.orangecola.cn/tags/SQLite3/"/>
    
  </entry>
  
  <entry>
    <title>Python使用Matplotlib库</title>
    <link href="https://www.orangecola.cn/posts/f4309140/"/>
    <id>https://www.orangecola.cn/posts/f4309140/</id>
    <published>2021-10-02T13:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h2><p>Matplotlib是一个python的2D绘图库，通过它可以生成绘图，直方图，功率谱，条形图，错误图，散点图等。可以让数据可视化，使数据更加客观，具体。</p><p>安装matplotlib库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h2 id="基本绘制"><a href="#基本绘制" class="headerlink" title="基本绘制"></a>基本绘制</h2><p>使用matplotlib绘制图形使，画点和画线是最常用的两个场景。</p><p>pyplot基本方法</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210408160923468.png" alt="image-20210408160923468"></p><h3 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h3><p>1.导入模块pyplot，在模块pyplot中包含很多用于生产图表的函数。</p><p>2.将绘制的直线坐标传递给函数plot().</p><p>3.通过函数plt.show()打开Matplotlib查看器，显示绘制的图形。</p><p>例：根据两点绘制一条直线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备绘制的点</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 调用绘制方法</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="设置标签文字和线条粗细"><a href="#设置标签文字和线条粗细" class="headerlink" title="设置标签文字和线条粗细"></a>设置标签文字和线条粗细</h3><p>开发者可以设置线条的粗细，设置文字等。</p><p>例：绘制折线图并设置样式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备绘制的点x，y</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="comment"># 调用绘制方法绘制折线图</span></span><br><span class="line"><span class="comment"># linewidth属性设置线条宽度</span></span><br><span class="line">plt.plot(x, y, linewidth=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 添加x,y轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y=x^2&quot;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]    <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line"><span class="comment"># 给图表添加标题</span></span><br><span class="line">plt.title(<span class="string">&quot;多个点绘制折线图&quot;</span>)</span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>matplotlib默认不支持中文，可以使用方法来解决显示中文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>] </span><br></pre></td></tr></table></figure><h3 id="绘制一元二次方程的曲线y-x-2"><a href="#绘制一元二次方程的曲线y-x-2" class="headerlink" title="绘制一元二次方程的曲线y=x^2"></a>绘制一元二次方程的曲线y=x^2</h3><p>Matplotlib中plot函数用来绘制曲，需要将200个点的x坐标和y坐标分别以序列的形式传入plot函数，然后调用show函数显示绘制图形。</p><p>例：一元二次方程的曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备绘制的200个点x坐标</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">-100</span>, <span class="number">100</span>)</span><br><span class="line">y = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"><span class="comment"># 绘制一元二次方程</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 将图形保存图片</span></span><br><span class="line">plt.savefig(<span class="string">&quot;result&quot;</span>)   <span class="comment"># 默认的格式png，result是图片名</span></span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制正弦曲线和余弦曲线"><a href="#绘制正弦曲线和余弦曲线" class="headerlink" title="绘制正弦曲线和余弦曲线"></a>绘制正弦曲线和余弦曲线</h3><p>使用plt函数绘制任何曲线都是生成若干个坐标点(x,y)，理论上坐标点越多越好。本例取0到10之间100个等差数作为x的坐标，将这100个x坐标值一起传入Mumpy的sin和cos函数，就会得到100个y坐标值，然后可以使用plot函数绘制正弦曲线和余弦曲线。</p><p>例：绘制正弦曲线和余弦曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 等差数方法</span></span><br><span class="line"><span class="comment"># 绘制正弦曲线</span></span><br><span class="line">sin_y = np.sin(x)</span><br><span class="line">plt.plot(x, sin_y)</span><br><span class="line"><span class="comment"># 绘制余弦曲线</span></span><br><span class="line">cos_y = np.cos(x)</span><br><span class="line">plt.plot(x, cos_y)<span class="comment"># plot两次，两曲线绘画到同一个画布上</span></span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="将画布分区"><a href="#将画布分区" class="headerlink" title="将画布分区"></a>将画布分区</h3><p>如果想绘制到两张画布中，可以调用subplot()函数将画布分区。</p><p>例：将画布分为区域，将图画绘制到画布指定区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对画布进行分区，将画布分为2行2列，图像绘制到区1</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>修改x，y轴坐标大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlim(<span class="number">-5</span>, <span class="number">15</span>)<span class="comment"># 修改x轴坐标为-5~15</span></span><br><span class="line">plt.ylim(<span class="number">-2</span>, <span class="number">2</span>)<span class="comment"># 修改y轴坐标为-2~2</span></span><br></pre></td></tr></table></figure><h3 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h3><p>使用scatter函数可以绘制随机点，该函数需要接收x坐标和y坐标的序列。</p><p>例：sin函数的散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 等差数方法</span></span><br><span class="line"><span class="comment"># 生成散点图</span></span><br><span class="line">plt.scatter(x, np.sin(x))</span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用plot()也可以绘制散点图，最后加字符串o。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, sin_y, <span class="string">&quot;o&quot;</span>)<span class="comment"># o表示使用点状</span></span><br></pre></td></tr></table></figure><p>使用plot()绘制图形速度优于scatter()，所以如果画点没有形式差别，可以使用plot画，而如果画点有形式差别（如点的大小或颜色不同）则必须使用scatter()来画。</p><h4 id="绘制大小不同颜色不同的散点图"><a href="#绘制大小不同颜色不同的散点图" class="headerlink" title="绘制大小不同颜色不同的散点图"></a>绘制大小不同颜色不同的散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成10种大小，100种颜色的散点图</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)   <span class="comment"># 使执行多次每次获取的随机数都是一样的</span></span><br><span class="line">x = np.random.rand(<span class="number">100</span>)  <span class="comment"># 生成随机100个点</span></span><br><span class="line">y = np.random.rand(<span class="number">100</span>)</span><br><span class="line">size = np.random.rand(<span class="number">100</span>)*<span class="number">1000</span></span><br><span class="line"><span class="comment"># 生成随机颜色</span></span><br><span class="line">color = np.random.rand(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line"><span class="comment"># scatter中的s数要和x，y标量一样</span></span><br><span class="line">plt.scatter(x, y, s=size, c=color, alpha=<span class="number">0.7</span>)</span><br><span class="line"><span class="comment"># s表示点的大小，c表示点的颜色，alpha表示透明度</span></span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>注意：点的个数和颜色的个数要相同；点的个数和点大小的个数可以不同，如果点的个数大于大小的个数，则超出点大小个数的会循环获取大小。</p><h3 id="绘制不同样式不同颜色的线条"><a href="#绘制不同样式不同颜色的线条" class="headerlink" title="绘制不同样式不同颜色的线条"></a>绘制不同样式不同颜色的线条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数的x</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">0</span>, <span class="string">&quot;--r&quot;</span>) <span class="comment"># --使样式为虚线，r为红色</span></span><br><span class="line">plt.plot(x, x+<span class="number">1</span>, <span class="string">&quot;-.b&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">2</span>, <span class="string">&quot;:g&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">3</span>, <span class="string">&quot;,k&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">4</span>, <span class="string">&quot;*c&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>增加图例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数的x</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 使用legend()添加图例，给plot方法添加参数label</span></span><br><span class="line">plt.plot(x, x+<span class="number">0</span>, <span class="string">&quot;--r&quot;</span>, label=<span class="string">&quot;--r&quot;</span>) <span class="comment"># --使样式为虚线，r为红色</span></span><br><span class="line">plt.plot(x, x+<span class="number">1</span>, <span class="string">&quot;-.b&quot;</span>, label=<span class="string">&quot;-.b&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">2</span>, <span class="string">&quot;:g&quot;</span>, label=<span class="string">&quot;:g&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">3</span>, <span class="string">&quot;,k&quot;</span>, label=<span class="string">&quot;,k&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">4</span>, <span class="string">&quot;*c&quot;</span>, label=<span class="string">&quot;*c&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>, fancybox=<span class="literal">True</span>, framealpha=<span class="number">0.8</span>, shadow=<span class="literal">True</span>, borderpad=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 图例默认位于左上角，可以通过loc进行修改</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>lengend参数：loc图例位置，fancybox边框，framealpha透明度，shadow阴影，borderpad边框宽度</li></ul><h3 id="绘制柱状图"><a href="#绘制柱状图" class="headerlink" title="绘制柱状图"></a>绘制柱状图</h3><p>可以使用bar函数绘制柱状图，柱状图需要水平的x坐标值，和每个x对应的y坐标值，形成柱状图。柱状图主要用来纵向对比和横向对比。</p><p>例：使用bar绘制柱状图，并设置柱的宽度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建x，y，x表示年份，y表示年份对应的数量</span></span><br><span class="line">x = [<span class="number">1990</span>, <span class="number">1995</span>, <span class="number">2000</span>, <span class="number">2005</span>]</span><br><span class="line">y = [<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>, <span class="number">4000</span>]</span><br><span class="line">x_label = [<span class="string">&quot;1990年&quot;</span>, <span class="string">&quot;1995年&quot;</span>, <span class="string">&quot;2000年&quot;</span>, <span class="string">&quot;2005年&quot;</span>]</span><br><span class="line"><span class="comment"># 调用bar()绘制柱状图</span></span><br><span class="line">plt.bar(x, y, width=<span class="number">3</span>)  <span class="comment"># 设置柱体宽度</span></span><br><span class="line"><span class="comment"># 修正中文乱码问题</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"><span class="comment"># 修改x坐标的显示值</span></span><br><span class="line">plt.xticks(x,x_label)</span><br><span class="line"><span class="comment"># 给x坐标，y坐标添加名称</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;年份&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;数量&quot;</span>)</span><br><span class="line"><span class="comment"># 给柱状图加标题</span></span><br><span class="line">plt.title(<span class="string">&quot;根据年份数量对比表&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>注意：bar函数的宽度不是像素宽度，bar函数会根据二维坐标系的尺寸，以及x坐标值的多少，自动确定每个柱的宽度，width指定的宽度就是这个标准柱宽度的倍数。该参数可以是浮点数或整数。</p><h4 id="bar绘制垂直方向柱状图和barh绘制水平方向柱状图"><a href="#bar绘制垂直方向柱状图和barh绘制水平方向柱状图" class="headerlink" title="bar绘制垂直方向柱状图和barh绘制水平方向柱状图"></a>bar绘制垂直方向柱状图和barh绘制水平方向柱状图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x，y</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.random.randint(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">#将画布分为一行两列，第一区bar画</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.bar(x, y, color=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"><span class="comment"># 在0的位置水平方向添加颜色分界线条</span></span><br><span class="line">plt.axhline(<span class="number">0</span>, color=<span class="string">&quot;blue&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个区barh画</span></span><br><span class="line"><span class="comment"># barh 将y和x进行了对换，竖着方向为x轴</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.barh(x, y, color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="comment"># 在0的位置垂直方向添加颜色分界线条</span></span><br><span class="line">plt.axvline(<span class="number">0</span>, color=<span class="string">&quot;red&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="柱状图正负数值设置不同颜色柱"><a href="#柱状图正负数值设置不同颜色柱" class="headerlink" title="柱状图正负数值设置不同颜色柱"></a>柱状图正负数值设置不同颜色柱</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x，y</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.random.randint(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">#将画布分为一行两列，第一区bar画</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">v_bar = plt.bar(x, y, color=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bar, height <span class="keyword">in</span> <span class="built_in">zip</span>(v_bar, y):   <span class="comment"># zip()使括号内两个属性对应起来</span></span><br><span class="line">    <span class="keyword">if</span> height &gt; <span class="number">0</span>:</span><br><span class="line">        bar.<span class="built_in">set</span>(color=<span class="string">&quot;green&quot;</span>)  <span class="comment"># set()设置bar属性</span></span><br><span class="line"><span class="comment"># 在0的位置水平方向添加颜色分界线条</span></span><br><span class="line">plt.axhline(<span class="number">0</span>, color=<span class="string">&quot;blue&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="柱状图使用实例"><a href="#柱状图使用实例" class="headerlink" title="柱状图使用实例"></a>柱状图使用实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">real_names = [<span class="string">&quot;我的姐姐&quot;</span>, <span class="string">&quot;哥斯拉大战金刚&quot;</span>, <span class="string">&quot;第十一回&quot;</span>]</span><br><span class="line"><span class="comment"># 3天内票房数</span></span><br><span class="line">real_num1 = [<span class="number">2947</span>, <span class="number">1562</span>, <span class="number">189</span>]</span><br><span class="line">real_num2 = [<span class="number">2150</span>, <span class="number">1140</span>, <span class="number">225</span>]</span><br><span class="line">real_num3 = [<span class="number">2602</span>, <span class="number">1290</span>, <span class="number">243</span>]</span><br><span class="line">x = np.arange(<span class="built_in">len</span>(real_names))</span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line">width = <span class="number">0.3</span></span><br><span class="line">plt.bar(x, real_num1, alpha=<span class="number">0.5</span>, width=width, label=real_names[<span class="number">0</span>])</span><br><span class="line">plt.bar([i+width <span class="keyword">for</span> i <span class="keyword">in</span> x], real_num2, alpha=<span class="number">0.5</span>, width=width, label=real_names[<span class="number">1</span>])</span><br><span class="line">plt.bar([i+width*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x], real_num3, alpha=<span class="number">0.5</span>, width=width, label=real_names[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 设置x坐标显示值</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>]=[<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line">x_label = [<span class="string">&quot;第&#123;&#125;天&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">plt.xticks([i+width <span class="keyword">for</span> i <span class="keyword">in</span> x], x_label)</span><br><span class="line"><span class="comment"># 给y坐标添加名称</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;票房数&quot;</span>)</span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper right&quot;</span>, fancybox=<span class="literal">True</span>, framealpha=<span class="number">0.8</span>, shadow=<span class="literal">True</span>, borderpad=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制饼状图"><a href="#绘制饼状图" class="headerlink" title="绘制饼状图"></a>绘制饼状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">man = <span class="number">1733</span></span><br><span class="line">woman = <span class="number">1566</span></span><br><span class="line">man_perc = man/(woman+man)</span><br><span class="line">woman_perc = woman/(woman+man)</span><br><span class="line"><span class="comment"># 解决中文乱码，正常显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>]=[<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"><span class="comment"># 添加名称</span></span><br><span class="line">labels = [<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>]</span><br><span class="line"><span class="comment"># 添加颜色</span></span><br><span class="line">colors = [<span class="string">&quot;blue&quot;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line"><span class="comment"># 绘制饼状图</span></span><br><span class="line">paches, texts, autotexts = plt.pie([man_perc, woman_perc], labels=labels, colors=colors, explode=(<span class="number">0</span>, <span class="number">0.03</span>), autopct=<span class="string">&quot;%0.2f%%&quot;</span>)</span><br><span class="line"><span class="comment"># 数据要用序列括起来,labels名称，explode分割饼状图,autopct显示百分比</span></span><br><span class="line"><span class="comment"># 设置饼状图中百分比字体颜色</span></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> autotexts:</span><br><span class="line">    text.set_color(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="comment"># 设置名称字体颜色</span></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br><span class="line">    text.set_color(<span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="comment"># 设置字体大小</span></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts+autotexts:</span><br><span class="line">    text.set_fontsize(<span class="number">16</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h3><p>直方图与柱状图的分格类似，都是由若干个柱组成，但直方图和柱状图的含义不同，直方图使用来观察分布状态的，而柱状图是用来查看每个x坐标对应的y坐标值的。直方图关注的是分布，不关心具体的值，而柱状图关心的是具体的某个值。</p><p>例：使用randn函数生成1000个正太分布的随机数，使用hist函数绘制这1000个随机数的分布状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 频次直方图，均匀分布,正态分布</span></span><br><span class="line"><span class="comment"># 生成1000个标准的正态分布随机数</span></span><br><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># hist生成直方图，bins修改柱的宽度</span></span><br><span class="line">plt.hist(x, bins=<span class="number">100</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用narmal()也可以生成正态分布直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用np.random.normal()指定期望和均值的正态分布</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>, <span class="number">0.8</span>, <span class="number">1000</span>)  <span class="comment"># (期望，均值，个数）</span></span><br><span class="line">y = np.random.normal(<span class="number">-2</span>, <span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">z = np.random.normal(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1000</span>)</span><br><span class="line">kwargs=<span class="built_in">dict</span>(bins=<span class="number">100</span>, alpha=<span class="number">0.5</span>)    <span class="comment"># bins设置柱体宽度，alpha设置透明度(0-1)</span></span><br><span class="line">plt.hist(x, **kwargs)</span><br><span class="line">plt.hist(y, **kwargs)</span><br><span class="line">plt.hist(z, **kwargs)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制等高线图"><a href="#绘制等高线图" class="headerlink" title="绘制等高线图"></a>绘制等高线图</h3><p>例：使用pylot绘制等高线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建x，y</span></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)   <span class="comment"># 生成等差数</span></span><br><span class="line">y = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 计算x,y相交的点(x,y)</span></span><br><span class="line">X, Y = np.meshgrid(x, y)    <span class="comment"># meshgrid生成相交点</span></span><br><span class="line"><span class="comment"># 计算Z的坐标</span></span><br><span class="line">Z = np.sqrt(X**<span class="number">2</span>+Y**<span class="number">2</span>)</span><br><span class="line">plt.contour(X, Y, Z)    <span class="comment"># 绘制线条的等高线图</span></span><br><span class="line">plt.contourf(X,Y, Z)    <span class="comment"># 绘制填充的等高线图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制三维图像"><a href="#绘制三维图像" class="headerlink" title="绘制三维图像"></a>绘制三维图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 导入3D包</span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建X,Y,Z</span></span><br><span class="line">X = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">Y = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">Z = [<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">fig = plt.figure()  <span class="comment"># 返回fig对象</span></span><br><span class="line"><span class="comment"># 创建Axes3D对象</span></span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">ax.plot_trisurf(X, Y, Z)    <span class="comment"># 输入坐标</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://www.orangecola.cn/categories/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.orangecola.cn/categories/Python/Matplotlib/"/>
    
    
    <category term="Python" scheme="https://www.orangecola.cn/tags/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.orangecola.cn/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>网络通信基础</title>
    <link href="https://www.orangecola.cn/posts/5888fee2/"/>
    <id>https://www.orangecola.cn/posts/5888fee2/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>私有IP：本地局域网上的IP，专门为组织机构内部使用</p><ul><li><p>10.0.0.0～10.255.255.255</p></li><li><p>172.16.0.0～172.31.255.255 </p></li><li><p>192.168.0.0～192.168.255.255 </p></li><li><p>公有IP：全球访问</p></li></ul><p>IP地址127． 0． 0． 1~127． 255． 255． 255⽤于回路测试</p><p>⼦⽹掩码：区分网络号和主机号</p><p>端口号： 用来标记区分进程</p><h2 id="网络基础-协议"><a href="#网络基础-协议" class="headerlink" title="网络基础-协议"></a>网络基础-协议</h2><p>根据TCP/IP协议簇功能的不同，将它分为了几种层次：</p><p>四层：</p><ul><li><p>网络接口层（链路层）</p></li><li><p>网络层</p></li><li><p>传输层</p></li><li><p>应用层</p></li></ul><p>七层：</p><ul><li><p>物理层</p></li><li><p>数据链路层</p></li><li><p>网络层</p></li><li><p>传输层</p></li><li><p>会话层</p></li><li><p>表示层</p></li><li><p>应用层</p></li></ul><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424151125242.png" alt="image-20210424151125242"></p><h2 id="Socket编程-简介"><a href="#Socket编程-简介" class="headerlink" title="Socket编程-简介"></a>Socket编程-简介</h2><p>socket：通过网络完成进程间通信的方式。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424151206303.png" alt="image-20210424151206303"></p><p>Socket本质是编程接口(API)： Socket 是对 TCP/IP 协议的封装。</p><p>套接字之间的连接过程可以分为三个步骤：服务器监听，客户端请求，连接确认。</p><h3 id="Socket编程-创建Socket"><a href="#Socket编程-创建Socket" class="headerlink" title="Socket编程-创建Socket"></a>Socket编程-创建Socket</h3><p>•创建Socket：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#导入套接字模块</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment">#s此时是一个socket对象，拥有发送和接收网络数据的功能</span></span><br></pre></td></tr></table></figure><p>该函数带有两个参数（参数必须写）</p><ul><li><p>AF_INET：ipv4协议⽤于 Internet 进程间通信</p></li><li><p>套接字类型， 可以是 SOCK_STREAM（流式套接字， ⽤于<br> TCP 协议） 或者 SOCK_DGRAM（数据报套接字， ⽤于 UDP 协<br> 议） </p><ul><li><p>TCP慢但是稳定不会丢数据</p></li><li><p>UDP快但是可能会丢数据（黑客攻击）</p></li></ul></li><li><p>确定了IP地址端口号（ipv4协议），TCP或UDP协议之后，计算机之间可以进行通信</p></li></ul><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>软件开发基本都需网络通信，应用程序接收发送信息。</p><p>使用操作系统提供的socket 编程接口来发送和接收信息，进行网络通信。</p><p>发送信息的应用程序，通过 <code>socket 编程接口</code> 把信息给操作系统的TCP/IP协议栈通讯模块；</p><p>通讯模块一层层传递给 其他通讯模块（网卡驱动等），最后再通过网卡等硬件设备发送到网络上去；</p><p>经过 网络上路由器的一次次转发，最终到了 目的程序 所在的 计算机（或者手机等设备） ， 再通过 其 操作系统的 TCP/IP协议栈通讯模块 一层层上传。</p><p>最后接收信息的程序，通过 <code>socket 编程接口</code> 接收到了 传输的信息。</p><p>这个过程可以用下图来表示</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/socket1.png"></p><h2 id="socket-库"><a href="#socket-库" class="headerlink" title="socket 库"></a>socket 库</h2><p>要进行socket编程，发送网络消息，我们可以使用 Python 内置的 socket 库 。</p><p>目前的socket编程，使用的最多的就是通过tcp协议进行网络通讯的。</p><p>tcp进行通讯的程序双方，分为服务端和客户端。</p><p>tcp 协议进行通讯的双方，是需要先建立一个虚拟连接的。然后双方程序才能发送业务数据信息。</p><p>建立tcp虚拟连接是通过著名的 <code>三次握手</code> 进行的。</p><p>我们现在来看一个 tcp协议进行通讯的 socket 服务端程序和客户端程序。</p><p>tcp 服务端程序 server.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  === TCP 服务端程序 server.py ===</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket 库</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机地址为空字符串，表示绑定本机所有网络接口ip地址</span></span><br><span class="line"><span class="comment"># 等待客户端来连接</span></span><br><span class="line">IP = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">PORT = <span class="number">50000</span></span><br><span class="line"><span class="comment"># 定义一次从socket缓冲区最多读入512个字节数据</span></span><br><span class="line">BUFLEN = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个socket对象</span></span><br><span class="line"><span class="comment"># 参数 AF_INET 表示该socket网络层使用IP协议</span></span><br><span class="line"><span class="comment"># 参数 SOCK_STREAM 表示该socket传输层使用tcp协议</span></span><br><span class="line">listenSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket绑定地址和端口</span></span><br><span class="line">listenSocket.bind((IP, PORT))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使socket处于监听状态，等待客户端的连接请求</span></span><br><span class="line"><span class="comment"># 参数 8 表示 最多接受多少个等待连接的客户端</span></span><br><span class="line">listenSocket.listen(<span class="number">8</span>)</span><br><span class="line">print(<span class="string">f&#x27;服务端启动成功，在<span class="subst">&#123;PORT&#125;</span>端口等待客户端连接...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dataSocket, addr = listenSocket.accept()</span><br><span class="line">print(<span class="string">&#x27;接受一个客户端连接:&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 尝试读取对方发送的消息</span></span><br><span class="line">    <span class="comment"># BUFLEN 指定从接收缓冲里最多读取多少字节</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="comment"># 退出循环，结束消息收发</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取的字节数据是bytes类型，需要解码为字符串</span></span><br><span class="line">    info = recved.decode()</span><br><span class="line">    print(<span class="string">f&#x27;收到对方信息： <span class="subst">&#123;info&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的数据类型必须是bytes，所以要编码</span></span><br><span class="line">    dataSocket.send(<span class="string">f&#x27;服务端接收到了信息 <span class="subst">&#123;info&#125;</span>&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端也调用close()关闭socket</span></span><br><span class="line">dataSocket.close()</span><br><span class="line">listenSocket.close()</span><br></pre></td></tr></table></figure><p>tcp 客户端程序 client.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  === TCP 客户端程序 client.py ===</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">IP = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">SERVER_PORT = <span class="number">50000</span></span><br><span class="line">BUFLEN = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个socket对象，指明协议</span></span><br><span class="line">dataSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务端socket</span></span><br><span class="line">dataSocket.connect((IP, SERVER_PORT))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 从终端读入用户输入的字符串</span></span><br><span class="line">    toSend = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>  toSend ==<span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发送消息，也要编码为 bytes</span></span><br><span class="line">    dataSocket.send(toSend.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待接收服务端的消息</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 打印读取的信息</span></span><br><span class="line">    print(recved.decode())</span><br><span class="line"></span><br><span class="line">dataSocket.close()</span><br></pre></td></tr></table></figure><p><strong>UDP ：User Data Protocol，用户数据报协议</strong></p><p><strong>TCP：Transmission Control Protocol，传输控制协议</strong></p><h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><p>Trivial File Transfer Protocol,简单⽂件传输协议），使用这个协议，就可以实现简单文件的下载，tftp端⼝号为69。</p><p>实现TFTP下载器：</p><ul><li><p>下载：从服务器上将一个文件复制到本机上</p></li><li><p>下载的过程：</p><ul><li>在本地创建一个空文件（与要下载的文件同名）</li><li>向里面写数据（接收到一点就向空文件里写一点）</li><li>关闭（接受完所有数据关闭文件）</li></ul></li></ul><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424214121560.png" alt="image-20210424214121560"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424214133777.png" alt="image-20210424214133777"></p><p>当客户端接收到的数据⼩于516（2字节操作码+2个字节的序号+512字节数据） 时， 就意味着服务器发送完毕了 （如果恰好最后一次数据长度为516，会再发一个长度为0的数据包）。</p><h3 id="struct模块使用"><a href="#struct模块使用" class="headerlink" title="struct模块使用"></a>struct模块使用</h3><ul><li><p>构造下载请求数据：“1test.jpg0octet0”</p></li><li><pre><code class="python">import structcmb_buf = struct.pack(“!H8sb5sb”,1,b“test.jpg”,0,b“octet”,0)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> 如何保证操作码（1&#x2F;2&#x2F;3&#x2F;4&#x2F;5）占两个字节？如何保证0占一个字节？</span><br><span class="line"></span><br><span class="line">- !H8sb5sb: ! 表示按照网络传输数据要求的形式来组织数据（占位的格式）</span><br><span class="line">   H 表示将后面的 1 替换成占两个字节</span><br><span class="line">     8s 相当于8个s（ssssssss）占8个字节</span><br><span class="line">      b 占一个字节</span><br><span class="line"></span><br><span class="line">struct模块可以按照指定格式将Python数据转换为字符串,该字符串为字节流</span><br><span class="line"></span><br><span class="line">struct模块中最重要的三个函数是pack(), unpack(), calcsize()</span><br><span class="line"></span><br><span class="line">按照给定的格式(fmt)，把数据封装成字符串(实际上是类似于c结构体的字节流)</span><br><span class="line"></span><br><span class="line">- pack(fmt, v1, v2, ...)  </span><br><span class="line"></span><br><span class="line">按照给定的格式(fmt)解析字节流string，返回解析出来的元组</span><br><span class="line"></span><br><span class="line">- unpack(fmt, string) </span><br><span class="line"></span><br><span class="line">计算给定的格式(fmt)占用多少字节的内存</span><br><span class="line"></span><br><span class="line">- calcsize(fmt)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">struct.pack(&quot;!HH&quot;,4,p_num)</span><br><span class="line"># </span><br><span class="line">cmdTuple &#x3D; struct.unpack(&quot;!HH&quot;, recvData[:4])</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP：传输控制协议。</p><p>TCP通信模型： 在通信之前，必须先等待建立链接。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210425214049971.png" alt="image-20210425214049971"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络通信" scheme="https://www.orangecola.cn/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    <category term="IP" scheme="https://www.orangecola.cn/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/IP/"/>
    
    
    <category term="网络通信" scheme="https://www.orangecola.cn/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    <category term="IP" scheme="https://www.orangecola.cn/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>Hexo快速搭建属于自己的博客</title>
    <link href="https://www.orangecola.cn/posts/e7d5b071/"/>
    <id>https://www.orangecola.cn/posts/e7d5b071/</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>Hexo 会解析 <code>markdown</code> 语法 生成对应的 html ，主题就是 css 样式。</p><p>本次使用的是Hexo+Butterfly主题搭建博客，所有安装建议安装最新稳定版本。</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li><p>安装Git</p><p>Git下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>下载太慢可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></li><li><p>安装Node.js</p><p>官网下载链接：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>同样太慢可以前往可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载安装包。</p></li><li><p>更换镜像源</p><p>为了解决速度慢的问题。建议换一个Node.js镜像源，这里更换为淘宝的镜像源，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装Hexo</p><p>官网链接：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>直接复制首页代码粘贴运行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><h2 id="快速生成静态博客"><a href="#快速生成静态博客" class="headerlink" title="快速生成静态博客"></a>快速生成静态博客</h2><ol><li><p>初始化</p><p>在本地找个位置创建一个文件夹，作为博客部署的空间。后续所以改动和添加都基于这个文件夹操作，在此文件夹内初始化hexo，选择该文件夹右键选择Git bash打开，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>Hexo 将会在文件夹中自动生成所需要的文件，初始化完成。</p><p>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li><li><p>启动本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动成功后，通过本地默认的4000端口访问：<a href="http://localhost:4000/">http://localhost:4000</a></p></li><li><p>生成第一篇博文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;第一篇文章&quot;</span><br></pre></td></tr></table></figure><p>此命令会在博客目录下的source/_posts目录下，生成一个Markdown格式的md结尾文件，文件名为“第一篇文章”，在此文件内使用Markdown语法就可以编写文章了。</p></li><li><p>hexo生成博客一键三连</p><p>每次修改完博客目录内部文件后，都需要重新生成一下，修改了博客配置文件需要清理缓存重新生成。只修改增加博文的也可以仅重新生成即可。</p><ol><li><p>清理缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>生成静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>本地预览（不需预览可跳过）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>   基本一个简单的博客就在本地搭建出来了，接下来就是将博客部署到可以网络上访问。</p><hr><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><ol><li><p>打开自己的Github仓库，新建放置博客的仓库(repository)。</p><p><strong>仓库命名格式为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你的Github账号名.github.io(例如：Orangecola.github.io)</span><br></pre></td></tr></table></figure><p>仓库要选择公开(Public)</p></li><li><p>安装hexo-git部署的插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml文件</p><p>打开博客目录中的_config.yml文件，最底部有一个# Deployment模块，在这个模块下配置git部署信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Orangecolaa/Orangecolaa.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># [,branch]为可选项，表示部署的分支</span></span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure><p>repo放置你的博客仓库URL，通过这个地址部署到你的博客仓库中。</p></li><li><p>部署到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>稍微等一下接下来就可以访问你的博客了，通过访问 你的Github账号名.github.io来访问。</p></li></ol><hr><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>Hexo有许多大神制作的主题，可以自由挑选更换。</p><p>Hexo主题官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><ol><li><p>下载主题</p><p>可以点进主题Github仓库复制url进行git clone下载，这里以下Butterfly为例，在博客目录下git bash输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>接下来在themes目录下会出现butterfly的主题文件夹。</p></li><li><p>修改博客目录的_config.yml文件</p><p>找到# Extensions模块下的theme标签（默认为landscape），将其替换为下载好的主题名称butterfly。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>接下来再重新清理缓存、部署、启动本地服务、推到远端，一套步骤下来博客+主题就搭建好了。</p></li></ol><hr><h1 id="后续美化"><a href="#后续美化" class="headerlink" title="后续美化"></a>后续美化</h1><p>后续关于主题界面美化增加功能插件等丰富性教程可以自行查看进行个性化修改。</p><p>butterfly官方文档：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo博客" scheme="https://www.orangecola.cn/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://www.orangecola.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何将项目上传到Github</title>
    <link href="https://www.orangecola.cn/posts/7bcbd7d7/"/>
    <id>https://www.orangecola.cn/posts/7bcbd7d7/</id>
    <published>2021-09-02T20:45:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github作为一个开源社区，上面有很多优秀的开源代码，但是对于小白来说，只是fork别人的代码很简单，但是当要将自己的项目上传到Github时或许不知道怎么上传。接下来就是超级小白教程了，详细介绍如何将项目上传到自己的Github上。</p><h2 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h2><p>（1）要上传那肯定得有一个Github账号，所以没有的同学先去申请一个吧。</p><p>访问：<a href="https://github.com/">https://github.com/</a> 进行注册</p><p>注册界面：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624215847427.png" alt="image-20210624215847427"></p><p>注册完成就可以继续啦。</p><p>（2）这里使用Git上传，所以我们还要安装Git工具，点击下面的下载地址下载，下载后直接一路默认安装就可以了。</p><p>下载：<a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a></p><p>下载界面：点击Download</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624220245747.png" alt="image-20210624220245747"></p><p>准备工作做完就可以开始了。</p><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h2><p>（1）进入Github首页，点击New repository新建一个项目</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624224152769.png" alt="image-20210624224152769"></p><p>（2）填写相应信息后点击create即可</p><table><thead><tr><th>对应名称</th><th>说明</th></tr></thead><tbody><tr><td>Repository name</td><td>仓库名称</td></tr><tr><td>Description(可选)</td><td>仓库描述介绍</td></tr><tr><td>Public, Private</td><td>仓库权限（公开共享，私有或指定合作者）</td></tr><tr><td>Initialize this repository with a README</td><td>添加一个README.md</td></tr><tr><td>gitignore</td><td>不需要进行版本管理的仓库类型，对应生成文件.gitignore</td></tr><tr><td>license</td><td>证书类型，对应生成文件LICENSE</td></tr></tbody></table><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624233647546.png" alt="image-20210624233647546"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624233736543.png" alt="image-20210624233736543"></p><p>（3）点击 Code 会出现一个地址，copy这个地址备用。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624234432662.png" alt="image-20210624234432662"></p><p>（4）接下来就是在你本地项目文件夹操作，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here 和 Git Bash Here，这里我们选择Git Bash Here，进入如下界面，Test即为我的项目名。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624235054700.png" alt="image-20210624235054700"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624235446189.png" alt="image-20210624235446189"></p><p>（5）接下来在命令行输入如下代码（关键步骤），把Github上面的仓库克隆到本地。</p><p>将<a href="https://xxxxx.git/">https://xxxxx.git</a> 替换成你自己copy的那个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Orangecolaa&#x2F;Test.git</span><br></pre></td></tr></table></figure><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625001348125.png" alt="image-20210625001348125"></p><p>（6）操作完这个步骤之后，你的本地项目文件夹下就会多出个文件夹，该文件夹名为你在Github上面创建的项目名，比如我这里多出了个Test文件夹，我们把本地项目文件夹下的所有要上传的文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625001933293.png" alt="image-20210625001933293"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625001959494.png" alt="image-20210625001959494"></p><p>（7）下一步接着继续在Git窗口中输入命令：cd Test，进入Test文件夹中。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625002115876.png" alt="image-20210625002115876"></p><p>（8）下一步依次输入以下代码即可完成其他剩余操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p><strong>注：</strong>别忘记后面的 .  此操作是把Test文件夹下面的文件都添加进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit  -m  &quot;注释&quot;  </span><br></pre></td></tr></table></figure><p><strong>注：</strong>“注释” 里面换成你要说明的，如“first commit”</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625003458450.png" alt="image-20210625003458450"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><strong>注：</strong>此操作目的是把本地仓库push到Github上面</p><p><strong>注意：</strong>由于Github上传代码的默认分支由master变为main了，所以在这里还是使用以前master，可能会遇到这个问题</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625004425650.png" alt="image-20210625004425650"></p><p>提示 error: failed to push some refs to ‘<a href="https://github.com/xxxxx/xxx.git&#39;">https://github.com/xxxxx/xxx.git&#39;</a></p><p><strong>解决办法</strong>：将master改为main</p><p>（9）接下来有可能如果你没代理可能还是上传不成功，会遇到下面这个问题。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210626162404022.png" alt="image-20210626162404022"></p><p><strong>错误描述：</strong>OpenSSL SSL_connect: Connection was reset in connection to github.com:443<br>看错误描述就标识ssl连接不到443端口，说明是代理出了问题。</p><p><strong>解决办法：</strong>本机挂代理，先检查git的全局配置，然后设置Git全局代理</p><p><strong>查看全局配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210626163151920.png" alt="image-20210626163151920"></p><p><strong>设置全局代理：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>示例7890端口是代理软件端口，按个人情况修改。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210626163325625.png" alt="image-20210626163325625"></p><p>接下来重新输入git push -u origin main 就可以成功了，上你自己的Github看看你创建的库就能看到自己上传的代码了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Github" scheme="https://www.orangecola.cn/categories/Github/"/>
    
    
    <category term="Github" scheme="https://www.orangecola.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Django初步</title>
    <link href="https://www.orangecola.cn/posts/6fd05540/"/>
    <id>https://www.orangecola.cn/posts/6fd05540/</id>
    <published>2021-09-01T20:20:00.000Z</published>
    <updated>2021-10-02T08:24:28.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Django初步"><a href="#Django初步" class="headerlink" title="Django初步"></a>Django初步</h1><h2 id="Web框架中的一些概念"><a href="#Web框架中的一些概念" class="headerlink" title="Web框架中的一些概念"></a>Web框架中的一些概念</h2><ul><li>MVC<ul><li>大部分开发语言中都有MVC框架</li><li>MVC框架的核心思想是：解耦</li><li>降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现代码的重用</li><li>m表示model，主要用于对数据库层的封装</li><li>v表示view，用于向用户展示结果</li><li>c表示controller，是核心，用于处理请求、获取数据、返回结果</li></ul></li><li>MVT<ul><li>Django是一款python的web开发框架</li><li>与MVC有所不同，属于MVT框架</li><li>m表示model，负责与数据库交互</li><li>v表示view，是核心，负责接收请求、获取数据、返回结果</li><li>t表示template，负责呈现内容到浏览器</li></ul></li></ul><h2 id="Django框架介绍"><a href="#Django框架介绍" class="headerlink" title="Django框架介绍"></a>Django框架介绍</h2><ul><li>Django是一个高级的Python Web框架，它鼓励快速开发和清洁，务实的设计。</li><li>由经验丰富的开发人员构建，它负责Web开发的许多麻烦，因此您可以专注于编写应用程序，而无需重新创建轮子。</li><li>它是免费的和开源的。</li><li>被官方称之为完美主义者的Web框架。</li><li>Django可以更快地构建更好的Web应用程序并减少代码。</li></ul><h3 id="Django框架的特点"><a href="#Django框架的特点" class="headerlink" title="Django框架的特点"></a>Django框架的特点</h3><ul><li>快速开发：Django的宗旨在于帮助开发人员快速从概念到完成应用程序。</li><li>安全可靠：Django认真对待安全性，帮助开发人员避免许多常见的安全错误。</li><li>超可伸缩性：Web上的一些最繁忙的网站利用了Django快速灵活扩展的能力。</li></ul><h3 id="Django可以使用什么Python版本？"><a href="#Django可以使用什么Python版本？" class="headerlink" title="Django可以使用什么Python版本？"></a>Django可以使用什么Python版本？</h3><table><thead><tr><th align="left">Django版本</th><th align="left">Python版本</th></tr></thead><tbody><tr><td align="left">2.2</td><td align="left">3.5、3.6、3.7、3.8（在2.2.8中添加）</td></tr><tr><td align="left">3.0、3.1、3.2</td><td align="left">3.6、3.7、3.8</td></tr></tbody></table><ul><li>Django的开发版本</li></ul><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/release-roadmap.e844db08610e.png" alt="img"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/22.png" alt="img"></p><h2 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h2><ul><li>作为Python Web框架，Django需要Python，在安装Python同时需要安装pip。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认安装最新版</span></span><br><span class="line">pip install django</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以指定版本</span></span><br><span class="line">pip install django==3.2.*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测当前是否安装Django及版本</span></span><br><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><h2 id="Django的快速入门体验"><a href="#Django的快速入门体验" class="headerlink" title="Django的快速入门体验"></a>Django的快速入门体验</h2><h3 id="Django项目创建和运行"><a href="#Django项目创建和运行" class="headerlink" title="Django项目创建和运行"></a>Django项目创建和运行</h3><p>如果这是你第一次使用Django，那么你必须要照顾一些初始设置。也就是说，您需要自动生成一些建立Django 项目的代码</p><p>从命令行cd到您要存储代码的目录，然后运行以下命令.</p><h4 id="1-创建项目："><a href="#1-创建项目：" class="headerlink" title="(1)创建项目："></a>(1)创建项目：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajango-admin startproject myweb</span><br></pre></td></tr></table></figure><p>我们来看看startproject创建的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost myweb]# tree</span><br><span class="line">.</span><br><span class="line">├── manage.py</span><br><span class="line">└── myweb</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><p><strong>关于上面自动生成的目录与文件解释如下：</strong></p><ul><li>外部myweb/根目录只是一个项目的容器。它的名字与Django无关; 您可以将其重命名为您喜欢的任何内容。</li><li>manage.py：一个命令行实用程序，可以让您以各种方式与此Django项目进行交互。你可以阅读所有的细节 manage.py在Django的管理和manage.py。</li><li>内部mysite/目录是您的项目的实际Python包。它的名字是您需要用来导入其中的任何内容的Python包名称（例如mysite.urls）。</li><li>mysite/<strong>init</strong>.py：一个空的文件，告诉Python这个目录应该被认为是一个Python包。</li><li>mysite/settings.py：此Django项目的设置/配置。 Django设置会告诉你所有关于设置的工作原理。</li><li>mysite/urls.py：该Django项目的URL声明; 您的Django动力网站的“目录”。</li><li>mysite/wsgi.py：WSGI兼容的Web服务器为您的项目提供服务的入口点。</li></ul><h4 id="2-运行开发服务器："><a href="#2-运行开发服务器：" class="headerlink" title="(2)运行开发服务器："></a>(2)运行开发服务器：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程访问</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8000/%E6%97%A2%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5%E3%80%82">http://127.0.0.1:8000/既可以查看测试网页。</a></p><p>默认情况下，该runserver命令在端口8000的内部IP上启动开发服务器。当然也可以指定端口开启服务,如8080端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure><h4 id="3-创建一个应用程序："><a href="#3-创建一个应用程序：" class="headerlink" title="(3)创建一个应用程序："></a>(3)创建一个应用程序：</h4><p>Django自带一个实用程序，可以自动生成应用程序的基本目录结构，因此您可以专注于编写代码而不是创建目录。</p><p>要创建您的应用程序，请确保您与目录位于同一目录，manage.py 并键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure><p>这将创建一个目录myapp，其目录如下：此目录结构将容纳轮询应用程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost demo]# tree myweb/</span><br><span class="line">myweb/</span><br><span class="line">├── manage.py</span><br><span class="line">├── myweb</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── myapp</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure><h3 id="Django的视图和函数"><a href="#Django的视图和函数" class="headerlink" title="Django的视图和函数"></a>Django的视图和函数</h3><h4 id="定义我们的第一个视图"><a href="#定义我们的第一个视图" class="headerlink" title="定义我们的第一个视图"></a>定义我们的第一个视图</h4><p>我们来写第一个视图。打开文件myapp/views.py 并放入以下Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world.&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是Django中最简单的视图。要调用视图，我们需要将其映射到一个URL。为此，我们需要一个URLconf。</p><p>要在myapp目录中创建一个URLconf，创建一个名为urls.py。</p><p><strong>在myapp/urls.py文件中包含以下代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下一步是将根URLconf指向myapp.urls模块。 在 myweb/urls.py添加一条import用于django.urls.include和插入include()的urlpatterns列表，<strong>所以你必须打开myweb下的urls写入子urls文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include,path <span class="comment"># 新增</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    path(<span class="string">&#x27;myweb/&#x27;</span>, include(<span class="string">&#x27;myapp.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中include()函数允许引用其他URLconfs。请注意，该include()函数的正则表达式 没有$（字符串匹配字符），而是尾部的斜杠。 每当Django遇到时 include()，它会排除与该点匹配的任何部分，并将剩余的字符串发送到随附的URLconf进行进一步处理。</p><p>您现在已将index视图连接到URLconf中。</p><p><strong>重新运行或刷新页面验证它的工作：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中转到http:// localhost：8000 / myweb /，您应该看到页面出现文本：”Hello, world. “</p><h3 id="项目的模型"><a href="#项目的模型" class="headerlink" title="项目的模型"></a>项目的模型</h3><h4 id="1-连接MySQL数据库设置"><a href="#1-连接MySQL数据库设置" class="headerlink" title="(1)连接MySQL数据库设置"></a>(1)连接MySQL数据库设置</h4><p>默认情况下，配置使用SQLite。若不使用SQLite作为数据库，则需要额外的设置，例如 USER，PASSWORD和HOST必须加入。</p><p>其中ENGINE设置为数据库后端使用。内置数据库后端有：</p><blockquote><ul><li>‘django.db.backends.postgresql’</li><li>‘django.db.backends.mysql’</li><li>‘django.db.backends.sqlite3’</li><li>‘django.db.backends.oracle’</li></ul></blockquote><p>在myweb/settings.py文件中，通过DATABASES项进行数据库设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydemo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Django使用MySQL数据库需要加载 MySQLdb模块，需要安装 mysqlclient，若已经安装请略过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install  mysqlclient</span><br></pre></td></tr></table></figure><h4 id="2-创建模型"><a href="#2-创建模型" class="headerlink" title="(2)创建模型"></a>(2)创建模型</h4><p>在我们的简单的应用程序中，去创建一个stu表信息操作的Model类。</p><p>编辑 myapp/models.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义Stu表对应的Model类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 定义属性：默认主键自增id字段可不写</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.SmallIntegerField()</span><br><span class="line">    sex = models.CharField(max_length=<span class="number">1</span>)</span><br><span class="line">    classid=models.CharField(max_length=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义默认输出格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%s:%d:%s:%s&quot;</span>%(self.<span class="built_in">id</span>,self.name,self.age,self.sex,self.classid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义对应的表名，默认表名：myapp_stu</span></span><br><span class="line">    <span class="comment"># class Meta:</span></span><br><span class="line">        <span class="comment"># db_table=&quot;stu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-激活模型"><a href="#3-激活模型" class="headerlink" title="(3)激活模型"></a>(3)激活模型</h4><p>要将该应用程序包括在我们的项目中，我们需要在设置中添加对其配置类的引用INSTALLED_APPS。</p><p>该 myappConfig包是在myapp/apps.py文件中，所以它的虚线路径’myapp.apps.myappConfig’。</p><p>编辑myweb/settings.py文件，并将该虚线路径添加到该INSTALLED_APPS设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS  =  [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>,  <span class="comment"># 新增，或者写 myapp.apps.MyappConfig</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4-使用模型"><a href="#4-使用模型" class="headerlink" title="(4)使用模型"></a>(4)使用模型</h4><p>在myapp应用的视图中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件：myapp/views.py 文件代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http  <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello Django!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">#获取所有stu表信息</span></span><br><span class="line">    lists = Stu.objects.<span class="built_in">all</span>()</span><br><span class="line">    print(lists)</span><br><span class="line">    <span class="comment">#获取单条学生信息</span></span><br><span class="line">    print(Stu.objects.get(<span class="built_in">id</span>=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>配置stu函数的访问路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在myapp/urls.py文件中配置</span></span><br><span class="line">path(<span class="string">&#x27;stu/&#x27;</span>, views.stu, name=<span class="string">&#x27;stu&#x27;</span>),</span><br></pre></td></tr></table></figure><p>启动服务后，在浏览器中访问,在命令行终端中查看输出效果: <a href="http://localhost:8000/myapp/stu">http://localhost:8000/myapp/stu</a></p><h3 id="启用网站Admin管理"><a href="#启用网站Admin管理" class="headerlink" title="启用网站Admin管理"></a>启用网站Admin管理</h3><h4 id="1-数据迁移"><a href="#1-数据迁移" class="headerlink" title="(1)数据迁移"></a>(1)数据迁移</h4><p>Django框架中有一个非常强大的应用功能–自动管理界面，常被Web平台管理者使用，去管理整个Web平台。</p><p>默认情况下，在settings.py配置文件中INSTALLED_APPS包含以下应用程序，这些应用程序都是由Django提供：</p><blockquote><ul><li>django.contrib.admin - 管理网站。你会很快使用它。</li><li>django.contrib.auth - 认证系统。</li><li>django.contrib.contenttypes - 内容类型的框架。</li><li>django.contrib.sessions - 会话框架</li><li>django.contrib.messages - 消息框架。</li><li>django.contrib.staticfiles - 管理静态文件的框架。</li></ul></blockquote><p>为了后续的开发，默认这些应用程序都是包含在里面的。</p><p>使用这些Django自带的应用程序，需要我们在数据库中创建一些数据表对应，然后才能使用它们。为此，请运行以下命令（数据结构迁移）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>其中该<code>migrate</code>命令查看该<code>INSTALLED_APPS</code>设置，并根据<code>myweb/settings.py</code>文件中的数据库设置和应用程序随附的数据库迁移创建任何必需的数据库表。您会看到适用于每个迁移的消息。</p><h4 id="2-创建管理员用户"><a href="#2-创建管理员用户" class="headerlink" title="(2). 创建管理员用户"></a>(2). 创建管理员用户</h4><p>首先，我们需要创建一个可以登录管理站点的用户。运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入您所需的用户名，然后按Enter键。</span></span><br><span class="line">Username: admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后将提示您输入所需的电子邮件地址：</span></span><br><span class="line">Email address: admin@example.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后一步是输入你的密码（&gt;=8位）。您将被要求输入密码两次，第二次作为第一次的确认</span></span><br><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p><strong>启动开发服务器</strong></p><p>默认情况下，Django管理员站点被激活。让我们开始开发服务器并探索它。</p><p>启动开发服务器命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line">或</span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>现在，打开一个Web浏览器，访问地址： <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><h4 id="3-设置时区和语言："><a href="#3-设置时区和语言：" class="headerlink" title="(3). 设置时区和语言："></a>(3). 设置时区和语言：</h4><p>编辑myweb/settings.py配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span><span class="comment"># 简体中文</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span><span class="comment"># 上海时区</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-将我们自定义的应用程序的加入到后台管理"><a href="#4-将我们自定义的应用程序的加入到后台管理" class="headerlink" title="(4). 将我们自定义的应用程序的加入到后台管理"></a>(4). 将我们自定义的应用程序的加入到后台管理</h4><p>但我们的自定义应用程序在哪里？并没有显示在后台管理索引页面上。</p><p>要做到这一点，打开myapp/admin.py 文件，并编辑代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu<span class="comment"># 新增</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Stu)<span class="comment"># 新增</span></span><br></pre></td></tr></table></figure><h4 id="5-更深入设计后台管理"><a href="#5-更深入设计后台管理" class="headerlink" title="(5)更深入设计后台管理"></a>(5)更深入设计后台管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑myapp/models.py文件，在Stu类中添加如下信息，让后台管理显示中文字段。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义Stu表对应的Model类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#定义属性：默认主键自增id字段可不写</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&quot;学号&quot;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&quot;姓名&quot;</span>,max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.SmallIntegerField(<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    sex = models.CharField(<span class="string">&quot;性别&quot;</span>,max_length=<span class="number">1</span>)</span><br><span class="line">    classid=models.CharField(<span class="string">&quot;班级&quot;</span>,max_length=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义默认输出格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%s:%d:%s:%s&quot;</span>%(self.<span class="built_in">id</span>,self.name,self.age,self.sex,self.classid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义对应的表名，默认表名：myapp_stu</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">&quot;stu&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;浏览学生信息&#x27;</span>  </span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;学生信息管理&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑myapp/admin.py 文件，实现信息管理的个性化定制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu</span><br><span class="line"></span><br><span class="line"><span class="comment">#Stu模型的管理器(装饰器写法)</span></span><br><span class="line"><span class="meta">@admin.register(Stu)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StuAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="comment">#listdisplay设置要显示在列表中的字段（id字段是Django模型的默认主键）</span></span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;classid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置哪些字段可以点击进入编辑界面</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#list_per_page设置每页显示多少条记录，默认是100条</span></span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#ordering设置默认排序字段，负号表示降序排序</span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment">#-id降序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#list_editable 设置默认可编辑字段</span></span><br><span class="line">    <span class="comment">#list_editable = [&#x27;age&#x27;,&#x27;sex&#x27;,&#x27;classid&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#其他请详见手册文档说明</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Django" scheme="https://www.orangecola.cn/categories/Django/"/>
    
    
    <category term="Django" scheme="https://www.orangecola.cn/tags/Django/"/>
    
  </entry>
  
</feed>
