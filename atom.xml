<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orangecola</title>
  
  <subtitle>I am your Orangecola</subtitle>
  <link href="https://www.orangecola.cn/atom.xml" rel="self"/>
  
  <link href="https://www.orangecola.cn/"/>
  <updated>2021-10-16T03:21:45.692Z</updated>
  <id>https://www.orangecola.cn/</id>
  
  <author>
    <name>Orange cola</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django开发投票应用</title>
    <link href="https://www.orangecola.cn/posts/533f3e14/"/>
    <id>https://www.orangecola.cn/posts/533f3e14/</id>
    <published>2021-10-16T11:20:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="第一个Django应用"><a href="#第一个Django应用" class="headerlink" title="第一个Django应用"></a>第一个Django应用</h1><p>本文以创建一个Web投票应用为例，使用Django开发Web应用，进一步了解Django的功能。本次应用使用Pycharm进行开发。</p><p>该应用（app）包括以下两个部分：</p><ul><li>一个可以让公众用户进行投票和查看投票结果的站点</li><li>一个可以进行增、删、改、查的后台管理界面，也就是我们常说的admin站点</li></ul><h2 id="一、新建项目"><a href="#一、新建项目" class="headerlink" title="一、新建项目"></a>一、新建项目</h2><p>在Pycharm中新建一个Django项目（专业版Pycharm才支持Django）</p><p>指定项目路径目录和python版本环境</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015091131961.png" alt="image-20211015091131961"></p><p>这将在指定项目目录下生成一个mysite目录，也就是你的这个Django项目的根目录。它包含了一系列自动生成的目录和文件，具备各自专有的用途。</p><p>注意：在给项目命名的时候必须避开Django和Python的保留关键字，比如“django”，“test”等，否则会引起冲突和莫名的错误。</p><h2 id="二、创建投票应用-app"><a href="#二、创建投票应用-app" class="headerlink" title="二、创建投票应用(app)"></a>二、创建投票应用(app)</h2><p>在 Django 中，每一个应用（app）都是一个 Python 包，并且遵循着相同的约定。Django 自带一个工具，可以帮你生成应用的基础目录结构。</p><p>app应用与project项目的区别：</p><ul><li>一个app实现某个具体功能，比如博客、公共档案数据库或者简单的投票系统；</li><li>一个project是配置文件和多个app的集合，这些app组合成整个站点；</li><li>一个project可以包含多个app；</li><li>一个app可以属于多个project！</li></ul><p>app的存放位置可以是任何地点，但是通常都将它们放在与<code>manage.py</code>脚本同级的目录下，这样方便导入文件。</p><p>在Pycharm中，没有可以创建app的图形化按钮，需要在下方的<code>Terminal</code>终端中输入命令（后面命令行都是在此终端输入）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015091838979.png" alt="image-20211015091838979"></p><p>通过前面在Pycharm中创建工程的方式有个方便之处，点击Terminal后，会自动进入虚拟环境。</p><h2 id="三、编写第一个视图"><a href="#三、编写第一个视图" class="headerlink" title="三、编写第一个视图"></a>三、编写第一个视图</h2><p>开始编写第一个视图</p><p>在<code>polls/views.py</code>文件中，编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;这里是orangecola的投票站点&quot;</span>)</span><br></pre></td></tr></table></figure><p>为了调用该视图，我们还需要编写urlconf，也就是路由配置。</p><p>在polls目录中新建一个文件或者将项目下的总<code>urls.py</code>复制过来，名字为<code>urls.py</code>（不要换成别的名字），在其中输入或修改代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来，在项目的<strong>主urls.py文件</strong>中添加<code>urlpattern</code>条目，指向我们刚才建立的polls这个app独有的urls.py文件，这里需要导入include模块。打开<code>mysite/urls.py</code>文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>include语法相当于多级路由，它把接收到的url地址去除与此项匹配的部分，将剩下的字符串传递给下一级路由urlconf进行判断。在路由的章节，有更加详细的用法指导。</p><p><strong>建议</strong>：除了admin路由外，尽量给每个app设计自己独立的二级路由。</p><p>启动服务器，在浏览器中访问地址<code>http://localhost:8000/polls/</code></p><p>一切正常的话，你将看到<code>这里是orangecola的投票站点</code></p><h2 id="四、settings和数据库配置"><a href="#四、settings和数据库配置" class="headerlink" title="四、settings和数据库配置"></a>四、settings和数据库配置</h2><p>在myweb/settings.py文件中，通过DATABASES项进行数据库设置</p><p>需要提前创建好mysite数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mysite&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Django使用MySQL数据库需要加载 MySQLdb模块，需要安装 mysqlclient，若已经安装请略过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install  mysqlclient</span><br></pre></td></tr></table></figure><p>在修改settings文件时，请顺便将<code>TIME_ZONE</code>设置为国内所在的时区<code>Asia/Shanghai</code>，这样显示的就是我们北京时间。</p><p>以及将创建的app加入到settings的<code>INSTALLED_APPS</code>设置项中，它列出了所有的项目中被激活的Django应用（app），你必须将你自己创建的app注册在这里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line"><span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;polls&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="五、创建模型"><a href="#五、创建模型" class="headerlink" title="五、创建模型"></a>五、创建模型</h2><p>进行定义模型，模型本质上就是数据库表的布局，再附加一些元数据。</p><p>Django通过自定义Python类的形式来定义具体的模型，每个模型的物理存在方式就是一个Python的类Class，每个模型代表数据库中的一张表，每个类的实例代表数据表中的一行数据，类中的每个变量代表数据表中的一列字段。</p><p>在这个应用中我们需要创建两个模型<code>Question</code>和<code>Choice</code>。</p><p>Question包含一个问题和一个发布日期。Choice包含两个字段：该选项的文本描述和该选项的投票数。每一条Choice都关联到一个Question。</p><p>编辑<code>polls/models.py</code>文件，编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 问题</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 发布日期</span></span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&#x27;date published&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否在当前发布的问卷</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 外键关联到Question</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 文本描述</span></span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 投票数</span></span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每一个类都是<code>django.db.models.Model</code>的子类。每一个字段都是<code>Field</code>类的一个实例，例如用于保存文本数据的CharField和用于保存时间类型的DateTimeField，它们告诉Django每一个字段保存的数据类型。</p><p>每一个Field实例的名字就是字段的名字（如： question_text 或者 pub_date ）。在你的Python代码中会使用这个值，你的数据库也会将这个值作为表的列名。</p><p>一些Field类必须提供某些特定的参数。例如CharField需要你指定<code>max_length</code>。这不仅是数据库结构的需要，同样也用于数据验证功能。</p><h3 id="启用模型"><a href="#启用模型" class="headerlink" title="启用模型"></a>启用模型</h3><p>在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br></pre></td></tr></table></figure><p>通过运行<code>makemigrations</code>命令，Django 会检测你对模型文件的修改，也就是告诉Django你对模型有改动，并且你想把这些改动保存为一个“<code>迁移(migration)</code>”。</p><p>接下来有一个叫做<code>migrate</code>的命令将对数据库执行真正的迁移动作。</p><p>进行数据迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>后续只需记住<strong>修改模型时的操作分三步</strong>：</p><blockquote><p>在models.py中修改模型；</p><p>运行<code>python manage.py makemigrations</code>为改动创建迁移记录文件；</p><p>运行<code>python manage.py migrate</code>，将操作迁移同步到数据库。</p></blockquote><h2 id="六、体验模型自带的API"><a href="#六、体验模型自带的API" class="headerlink" title="六、体验模型自带的API"></a>六、体验模型自带的API</h2><p>Django模型层自带ORM系统，会自动为每个模型创建数据库访问的API，直接拿来用就可以，非常简单、方便、易学。</p><p>进入Python交互环境，尝试使用Django提供的数据库访问API。要进入Python的shell，命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p>在shell中，我们可以做一些测试性、探索性、研究性的操作，但是要注意，这和在脚本中编写代码一样，也有可能会修改数据库中的实际数据。</p><p>当你进入shell后，尝试一下下面的API（这些代码必须执行，否则会影响后面的教程操作，我们不必管这些API的具体细节，先熟悉一下）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导入我们写的模型类</span></span><br><span class="line">In：from polls.models import Question, Choice </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个新的question对象</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Django推荐使用timezone.now()代替python内置的datetime.datetime.now()</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个timezone就来自于Django的依赖库pytz</span></span><br><span class="line">In：from django.utils import timezone</span><br><span class="line">In：q = Question(question_text=&quot;What&#x27;s new?&quot;, pub_date=timezone.now())</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你必须显式的调用save()方法，才能将对象保存到数据库内</span></span><br><span class="line">In：q.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认情况，你会自动获得一个自增的名为id的主键</span></span><br><span class="line">In：q.id</span><br><span class="line">Out：1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过python的属性调用方式，访问模型字段的值</span></span><br><span class="line">In：q.question_text</span><br><span class="line">Out：&quot;What&#x27;s new?&quot;</span><br><span class="line">In：q.pub_date</span><br><span class="line">Out：datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过修改属性来修改字段的值，然后显式的调用save方法进行保存。</span></span><br><span class="line">In：q.question_text = &quot;What&#x27;s up?&quot;</span><br><span class="line">In：q.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> objects.all() 用于查询数据库内的所有questions</span></span><br><span class="line">In：Question.objects.all()</span><br><span class="line">Out：&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Django提供了大量的关键字参数查询API</span></span><br><span class="line">In：Question.objects.filter(id=1)</span><br><span class="line">Out：&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line">In：Question.objects.filter(question_text__startswith=&#x27;What&#x27;)</span><br><span class="line">Out：&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取今年发布的问卷</span></span><br><span class="line">In：from django.utils import timezone</span><br><span class="line">In：current_year = timezone.now().year</span><br><span class="line">In：Question.objects.get(pub_date__year=current_year)</span><br><span class="line">Out：&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询一个不存在的ID，会弹出异常</span></span><br><span class="line">In：Question.objects.get(id=2)</span><br><span class="line">Out：Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">DoesNotExist: Question matching query does not exist.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Django为主键查询提供了一个缩写：pk。下面的语句和Question.objects.get(id=1)效果一样.</span></span><br><span class="line">In：Question.objects.get(pk=1)</span><br><span class="line">Out：&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 看看我们自定义的方法用起来怎么样</span></span><br><span class="line">In：q = Question.objects.get(pk=1)</span><br><span class="line">In：q.was_published_recently()</span><br><span class="line">Out：True</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有与q对象有关系的choice集合，目前是空的，还没有任何关联对象。</span></span><br><span class="line">In：q.choice_set.all()</span><br><span class="line">Out：&lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建3个choices.</span></span><br><span class="line">In：q.choice_set.create(choice_text=&#x27;Not much&#x27;, votes=0)</span><br><span class="line">Out：&lt;Choice: Not much&gt;</span><br><span class="line">In：q.choice_set.create(choice_text=&#x27;The sky&#x27;, votes=0)</span><br><span class="line">Out：&lt;Choice: The sky&gt;</span><br><span class="line">In：c = q.choice_set.create(choice_text=&#x27;Just hacking again&#x27;, votes=0)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Choice对象可通过API访问和他们关联的Question对象</span></span><br><span class="line">In：c.question</span><br><span class="line">Out：&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同样的，Question对象也可通过API访问关联的Choice对象</span></span><br><span class="line">In：q.choice_set.all()</span><br><span class="line">Out：&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line">In：q.choice_set.count()</span><br><span class="line">Out：3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> API会自动进行连表操作，通过双下划线分割关系对象。连表操作可以无限多级，一层一层的连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是查询所有的Choices，它所对应的Question的发布日期是今年。（重用了上面的current_year结果）</span></span><br><span class="line">In：Choice.objects.filter(question__pub_date__year=current_year)</span><br><span class="line">Out：&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用delete方法删除对象</span></span><br><span class="line">In：c = q.choice_set.filter(choice_text__startswith=&#x27;Just hacking&#x27;)</span><br><span class="line">In：c.delete()</span><br></pre></td></tr></table></figure><p>模型是Django项目的核心，也是动态网站与数据库交互的核心，所以尽量多看理解。</p><h2 id="七、admin后台管理站点"><a href="#七、admin后台管理站点" class="headerlink" title="七、admin后台管理站点"></a>七、admin后台管理站点</h2><ol><li><p>创建管理员</p><p>创建一个可以登录admin站点的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>按提示输入用户名，邮箱地址，密码确认即可。</p></li><li><p>启动服务器</p><p>在浏览器访问<code>http://127.0.0.1:8000/admin/</code> 你就能看到admin的登陆界面了</p></li><li><p>进入站点</p><p>利用刚才建立的admin账户，登陆admin，你将看到admin后台界面</p><p>当前只有两个可编辑的模型：Groups和Users。它们是<code>django.contrib.auth</code>模块提供的身份认证框架内的模型。</p></li><li><p>注册投票应用</p><p>应用必须先在admin中进行注册，告诉admin站点，请将polls的模型加入站点内，接受站点的管理</p><p>打开<code>polls/admin.py</code>文件，加入下面的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>注册完成重启服务器就可以看到Question栏目了</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015104955227.png" alt="image-20211015104955227"></p></li></ol><h2 id="八、视图和模板"><a href="#八、视图和模板" class="headerlink" title="八、视图和模板"></a>八、视图和模板</h2><ol><li><p>视图概述：</p><p>Django 中的视图的概念是一类具有相同功能和模板的网页的集合。一个视图通常对应一个页面，提供特定的功能，使用特定的模板。</p><p>在我们的投票应用中，我们将建立下面的视图：</p><ul><li>问卷“index”页：显示最新的一些问卷</li><li>问卷“detail”页面：显示一个问卷的详细文本内容，没有调查结果但是有一个投票或调查表单。</li><li>问卷“results”页面：显示某个问卷的投票或调查结果。</li><li>投票动作页面：处理针对某个问卷的某个选项的投票动作。</li></ul><p>在Django中，网页和其它的一些内容都是通过视图来处理的。视图其实就是一个简单的Python函数（在基于类的视图中称为方法）。Django通过对比请求的URL地址来选择对应的视图，也就是路由。为了将 URL 和视图关联起来，Django 使用 <code>URLconfs</code>来配置路由。</p></li><li><p>编写视图文件</p><p>打开<code>polls/views.py</code>文件，编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)  <span class="comment"># 按条件倒序排序</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/index.html&#x27;</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="comment"># 1为模型，2关键字参数，如果对象不存在则弹出Http404错误</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/results.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&#x27;choice&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span>(KeyError, Choice.DoesNotExist):</span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">&#x27;question&#x27;</span>: question,</span><br><span class="line">            <span class="string">&#x27;error_message&#x27;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, context)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;polls:results&#x27;</span>, args=(question.<span class="built_in">id</span>,)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>**render()**函数的第一个位置参数是请求对象（就是view函数的第一个参数），这个参数是固定写法，不需要变动。第二个位置参数是模板文件。还可以有一个可选的第三参数，一个字典，包含需要传递给模板的数据。最后render函数返回一个经过字典数据渲染过的模板封装而成的HttpResponse对象。</li><li>**get_object_or_404()**方法将一个Django模型作为第一个位置参数，后面可以跟上任意数量的关键字参数，如果对象不存在则弹出Http404错误。</li><li><code>request.POST</code>是一个类似字典的对象，允许你通过键名访问提交的数据。<code>request.POST[’choice’]</code>有可能触发一个KeyError异常。</li><li><code>HttpResponseRedirect</code>需要一个参数：重定向的URL。这里有一个建议，当你成功处理POST数据后，应当保持一个良好的习惯，始终返回一个<code>HttpResponseRedirect</code>。</li><li><code>reverse()</code>函数，它能帮助我们避免在视图函数中硬编码URL。它首先需要一个我们在URLconf中指定的name，然后是传递的数据。</li></ul><p>在<code>polls/urls.py</code>文件中加入下面的路由，将其映射到我们上面新增的视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定该应用的命名空间,此urls只应用于此应用</span></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>URL names的命名空间</strong> 可以在polls/urls.py文件的开头部分，添加一个<code>app_name</code>的变量来指定该应用的命名空间，用来指定此urls.py只属于这个应用。</li></ul></li><li><p>使用模板</p><p>在<code>polls</code>目录下创建一个新的<code>templates</code>目录，Django会在它里面查找模板文件，在刚才创建的<code>templates</code>目录中，再创建一个新的子目录名叫<code>polls</code>，进入该子目录，创建一个新的HTML文件<code>index.html</code>。</p><p>你的模板文件应该是<code>polls/templates/polls/index.html</code>。</p></li></ol><p>   编辑index.html文件：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>投票系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for question in latest_question_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   上面视图中index中的代码会加载<code>polls/index.html</code>文件，并传递给它一个参数。这个参数是一个字典，包含了模板变量名和Python对象之间的映射关系。</p><p>   在浏览器中通过访问<code>/polls/</code>，你可以看到一个列表，包含<code>“What’s up”</code>的问卷，以及连接到其对应详细内容页面的链接点。</p><p>   编辑detail.html文件：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>投票页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; choice.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;投票&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在 <code>&#123;% for %&#125;</code>循环中的方法调用——<code>question.choice_set.all</code>其实就是Python的代码<code>question.choice_set.all()</code>,它将返回一组可迭代的<code>Choice</code>对象，并用在<code>&#123;% for %&#125;</code>标签中。</p></li><li><p>为了接收用户的投票选择，我们需要在前端页面显示一个投票界面并创建一个form表单。action表示你要发送的目的url，method表示提交数据的方式，一般分post和get。</p></li><li><p><code>forloop.counter</code>是Django模板系统专门提供的一个变量，用来表示你当前循环的次数，一般用来给循环项目添加有序数标。</p></li><li><p>由于我们发送了一个POST请求，就必须考虑一个跨站请求伪造的安全问题，简称CSRF（具体含义请百度）。Django为你提供了一个简单的方法来避免这个困扰，那就是在form表单内添加一条<code>&#123;% csrf_token %&#125;</code>标签，标签名不可更改，固定格式，位置任意，只要是在form表单内。</p></li></ul><p>   编辑results.html文件：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>投票结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u1</span>&gt;</span></span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">u1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>投票结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u1</span>&gt;</span></span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">u1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   现在你可以到浏览器中访问``<a href="http://127.0.0.1:8000/polls/1/%60%E4%BA%86%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%8A%95%E7%A5%A8%E3%80%82%E6%8A%95%E7%A5%A8%E6%8F%90%E4%BA%A4%E5%AE%8C%E6%88%90%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E9%A1%B5%E9%9D%A2%EF%BC%8C%E6%AF%8F%E6%8A%95%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AE%83%E7%9A%84%E5%86%85%E5%AE%B9%E5%B0%B1%E6%9B%B4%E6%96%B0%E4%B8%80%E6%AC%A1%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%8F%90%E4%BA%A4%E7%9A%84%E6%97%B6%E5%80%99%E6%B2%A1%E6%9C%89%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%88%99%E4%BC%9A%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E3%80%82">http://127.0.0.1:8000/polls/1/`了，可以进行投票。投票提交完成你会看到一个结果页面，每投一次，它的内容就更新一次。如果你提交的时候没有选择项目，则会得到一个错误提示。</a></p><h2 id="九、使用通用视图"><a href="#九、使用通用视图" class="headerlink" title="九、使用通用视图"></a>九、使用通用视图</h2><p>上面的detail、index和results视图的代码非常相似，有点冗余，他们都具有类似的业务逻辑，实现类似的功能：通过从URL传递过来的参数去数据库查询数据，加载一个模板，利用刚才的数据渲染模板，返回这个模板。Django提供了另一种快捷方式，名为“通用视图”。</p><p>将原来的代码改为使用通用视图的方式</p><ul><li>修改URLconf设置</li><li>删除一些旧的无用的视图</li><li>采用基于类视图的新视图</li></ul><p><strong>PS：为什么本教程的代码来回改动这么频繁？</strong></p><p>通常在写一个Django的app时，我们一开始就要决定使用通用视图还是不用，而不是等到代码写到一半了才重构你的代码成通用视图。但是为了让我们清晰的理解视图的内涵，“故意”走了一条比较曲折的路。</p><p>Django的视图类型可以分为函数视图和类视图，也就是FBV和CBV，两者各有优缺点，CBV不一定就高大上。大多数场景下，函数视图更简单易懂，代码量更少。但是在需要继承、封装某些视图的时候，CBV就能发挥优势。</p><p>通用视图其实就是Django内置的一些类视图，可以拿来直接使用。但非常简单，只适用于一些简单场景，如果业务逻辑比较复杂，依然需要改造类视图。</p><h3 id="1-修改URLconf"><a href="#1-修改URLconf" class="headerlink" title="1. 修改URLconf"></a>1. 修改URLconf</h3><p>打开<code>polls/urls.py</code>文件，将其修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定该应用的命名空间,此urls只应用于此应用</span></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/results/&#x27;</span>, views.ResultsView.as_view(), name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-修改视图"><a href="#2-修改视图" class="headerlink" title="2. 修改视图"></a>2. 修改视图</h3><p>接下来修改视<code>polls/views.py</code>文件，将原来的index，detail和results视图删除，增加基于类视图的通用视图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">generic.ListView</span>):</span></span><br><span class="line">    template_name = <span class="string">&#x27;polls/index.html&#x27;</span></span><br><span class="line">    context_object_name = <span class="string">&#x27;latest_question_list&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&#x27;polls/detail.html&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&#x27;polls/results.html&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&#x27;choice&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span>(KeyError, Choice.DoesNotExist):</span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">&#x27;question&#x27;</span>: question,</span><br><span class="line">            <span class="string">&#x27;error_message&#x27;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, context)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;polls:results&#x27;</span>, args=(question.<span class="built_in">id</span>,)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个视图文件中使用了两种通用视图<code>ListView</code>和<code>DetailView</code>（它们是作为父类被继承的）。ListView：显示一个对象的列表，DetailView：显示特定类型对象的详细页面。</p><ul><li>每一种通用视图都需要知道它要作用在哪个模型上，这通过model属性提供。</li><li><code>DetailView</code>需要从url捕获到的称为”pk”的主键值，因此我们在url文件中将2和3条目的<code>&lt;question_id&gt;</code>修改成了<code>&lt;pk&gt;</code>。</li></ul><p><code>template_name</code>属性用来指定模板名的，用于代替自动生成的默认模板名，指定不同的模板显示不同的页面。</p><p>在前面部分的函数视图中我们给模板提供了一个包含<code>question</code>和<code>latest_question_list</code>的上下文变量。而对于DetailView，question变量会被自动提供，因为我们使用了Django的模型（Question），Django会智能的选择合适的上下文变量。然而，对于ListView，自动生成的上下文变量是<code>question_list</code>。为了覆盖它，使用了<code>context_object_name</code>属性，指定我们希望使用的变量为<code>latest_question_list</code>而不是<code>question_list</code>。</p><p>类视图是Django比较高级的一种用法，不太好理解，后面慢慢深入理解就好了。</p><p>现在可以重新运行开发服务器，然后试试基于类视图的应用程序了，效果和前面的函数视图是一样的。</p><h2 id="十、测试"><a href="#十、测试" class="headerlink" title="十、测试"></a>十、测试</h2><h3 id="1-自动化测试"><a href="#1-自动化测试" class="headerlink" title="1. 自动化测试"></a>1. 自动化测试</h3><p>测试是一种例行的、不可缺失的工作，用于检查你的程序是否符合预期。</p><p>自动化测试则是系统地较为完整地对程序进行测试，效率高，准确性高，并且大部分共同的测试工作会由系统来帮你完成。一旦你创建了一组自动化测试程序，当你修改了你的应用，你就可以用这组测试程序来检查你的代码是否仍然同预期的那样运行，而无需执行耗时的手动测试。</p><p><strong>为什么需要测试？</strong></p><ul><li><strong>测试可以节省你的时间</strong></li><li><strong>测试不仅仅可以发现问题，还能防止问题</strong></li><li><strong>测试使你的代码更受欢迎</strong></li><li><strong>测试有助于团队合作</strong></li></ul><h3 id="2-编写测试程序"><a href="#2-编写测试程序" class="headerlink" title="2. 编写测试程序"></a>2. 编写测试程序</h3><p>Django是一个全面、完善、严谨的Web框架，当然不会缺少测试功能。</p><p>每个app在创建的时候，都会自动创建一个<code>tests.py</code>文件，就像<code>views.py</code>等文件一样。通常，我们会把测试代码放在应用的<code>tests.py</code>文件中，测试系统将自动地从任何名字以test开头的文件中查找测试程序。</p><p>在投票应用的<code>polls/tests.py</code>文件中写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionMethodTests</span>(<span class="params">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在将来发布的问卷应该返回False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIn(future_question.was_published_recently(), <span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在这里创建了一个<code>django.test.TestCase</code>的子类，它具有一个方法，该方法创建一个<code>pub_date</code>在未来的Question实例。最后我们检查<code>was_published_recently()</code>的输出，它应该是 False。</p><h3 id="3-运行测试程序"><a href="#3-运行测试程序" class="headerlink" title="3. 运行测试程序"></a>3. 运行测试程序</h3><p>在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py test polls</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">F</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionMethodTe</span><br><span class="line">sts)</span><br><span class="line">在将来发布的问卷应该返回False</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:\PycharmProjects\Django\mysite\polls\tests.py&quot;, line 14, in test_was_publi</span><br><span class="line">shed_recently_with_future_question</span><br><span class="line">    self.assertIs(future_question.was_published_recently(), False)</span><br><span class="line">AssertionError: True is not False</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.003s</span><br><span class="line"></span><br><span class="line">FAILED (failures&#x3D;1)</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>python manage.py test polls</code>命令会查找投票应用中所有的测试程序</li><li>发现一个<code>django.test.TestCase</code>的子类</li><li>为测试创建一个专用的数据库</li><li>查找名字以<code>test</code>开头的测试方法</li><li>在<code>test_was_published_recently_with_future_question</code>方法中，创建一个Question实例，该实例的pub_data字段的值是30天后的未来日期。</li><li>然后利用<code>assertIs()</code>方法，它发现<code>was_published_recently()</code>返回了True，而不是我们希望的False。</li></ul><p>测试程序会通知我们哪个测试失败了，错误出现在哪一行。</p><h3 id="4-修复bug"><a href="#4-修复bug" class="headerlink" title="4. 修复bug"></a>4. 修复bug</h3><p>现在知道bug出现在什么位置，就可以着手去修复了，修改<code>polls/models.py</code>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span>(<span class="params">self</span>):</span></span><br><span class="line">now = timezone.now()</span><br><span class="line"><span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br></pre></td></tr></table></figure><p>重新运行测试命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Creating test database for alias &#39;default&#39;...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.002s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying test database for alias &#39;default&#39;...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bug已经被修复，程序可以正常运行。</p><h3 id="5-更加全面的测试"><a href="#5-更加全面的测试" class="headerlink" title="5. 更加全面的测试"></a>5. 更加全面的测试</h3><p>事实上，前面的测试用例还不够完整，为了使<code>was_published_recently()</code>方法更加可靠，我们在上面的测试类中再额外添加两个其它的方法，来更加全面地进行测试。</p><p>修改<code>polls/tests.py</code>增加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_old_question</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    只要超过1天的问卷，就返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(days=<span class="number">1</span>, seconds=<span class="number">1</span>)</span><br><span class="line">    old_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(old_question.was_published_recently(), <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_recent_question</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    最近一天内的问卷，返回True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(hours=<span class="number">23</span>, minutes=<span class="number">59</span>, seconds=<span class="number">59</span>)</span><br><span class="line">    recent_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(recent_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>现在我们有三个测试来保证无论发布时间是在过去、现在还是未来<code>Question.was_published_recently()</code>都将返回正确的结果。</p><h2 id="十一、静态文件"><a href="#十一、静态文件" class="headerlink" title="十一、静态文件"></a>十一、静态文件</h2><p>Web应用除了由服务器生成的HTML文件外，一般需要提供一些其它的必要文件，比如图片文件、JavaScript脚本和CSS样式表等等，用来为用户呈现出一个完整的网页。在Django中，我们将这些文件统称为“静态文件”，因为这些文件的内容基本是固定不变的，不需要动态生成，只需要放在指定位置模板中引用即可。</p><h3 id="1-使用静态文件"><a href="#1-使用静态文件" class="headerlink" title="1. 使用静态文件"></a>1. 使用静态文件</h3><p>首先在你的polls目录中创建一个<code>static</code>目录。Django将在那里查找静态文件，这与Django在polls/templates/中寻找对应的模板文件的方式是一致的。</p><p>在刚才的<code>static</code>目录中新建一个<code>polls</code>子目录，再在该子目录中创建一个css目录，在css目录中创建一个<code>style.css</code>文件。这个css样式文件对应的url为<code>polls/static/polls/style.css</code>。你可以通过书写<code>polls/style.css</code>在Django中访问这个静态文件，与你如何访问模板的路径类似。</p><blockquote><p>建议：1.在static/目录下创建与应用同名目录；2.在static/polls/目录下创建出css、js、images等各类区分开的静态文件目录，结构更规整。</p></blockquote><p>将下面的代码写入样式文件<code>polls/static/polls/css/style.css</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在模板文件<code>polls/templates/polls/index.html</code>的头部加入下面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;# 放在页面第一行</span><br><span class="line"></span><br><span class="line"># 放在head标签中</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/css/style.css&#x27; %&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&#123;% static %&#125;</code>模板标签会生成静态文件的绝对URL路径。</p><p>重启服务器查看页面，发现页面上的链接字体应用了你写的css样式了。</p><h3 id="2-添加背景图片"><a href="#2-添加背景图片" class="headerlink" title="2. 添加背景图片"></a>2. 添加背景图片</h3><p>按照上面一样，我们在<code>polls/static/polls/</code>目录下创建一个用于存放图片的<code>images</code>子目录，在这个子目录里放入<code>background.jpg</code>文件。</p><p>在css样式文件<code>polls/static/polls/css/style.css</code>中添加下面的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">&quot;../images/background.jpg&quot;</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载<code>http://localhost:8000/polls/</code>(CTRL+F5)，你在页面会看到载入的背景图片。</p><p><code>&#123;% static %&#125;</code>模板标签不能用在静态文件，比如样式表中，因为他们不是由Django生成的。 你应该使用相对路径来相互链接静态文件，因为这样你可以改变<code>STATIC_URL</code>（ static模板标签用它来生成URLs）而不用同时修改一大堆静态文件中路径相关的部分。</p><h3 id="3-直接访问静态文件"><a href="#3-直接访问静态文件" class="headerlink" title="3. 直接访问静态文件"></a>3. 直接访问静态文件</h3><p>实际上不管是在Django开发服务器上，还是在<code>nginx+uwsgi+django</code>部署的服务器上，都可以直接通过url访问静态文件，不需要在Django中专门为每个静态文件编写url路由和视图。</p><h2 id="十二、自定义Admin"><a href="#十二、自定义Admin" class="headerlink" title="十二、自定义Admin"></a>十二、自定义Admin</h2><h3 id="1-自定义后台表单"><a href="#1-自定义后台表单" class="headerlink" title="1. 自定义后台表单"></a>1. 自定义后台表单</h3><p>在前面的学习过程中，通过<code>admin.site.register(Question)</code>语句，我们在admin站点中注册了Question模型。Django会自动生成一个该模型的默认表单页面。如果你想自定义该页面的外观和工作方式，可以在注册对象的时候告诉Django你的自定义选项。</p><p>下面是一个修改admin表单默认排序方式的例子。修改<code>polls/admin.py</code>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    fields = [<span class="string">&#x27;pub_date&#x27;</span>, <span class="string">&#x27;question_text&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将app模型加入admin站点管理</span></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure><p>只需要创建一个继承<code>admin.ModelAdmin</code>的模型管理类，在其中进行一些自定义操作，然后将它作为第二个参数传递给<code>admin.site.register()</code>，第一个参数则是Question模型本身。</p><p>上面的修改让<code>Date Publication</code>字段显示在<code>Question</code>字段前面了（默认是在后面）</p><p>如果有很多的字段，选择一种直观的符合我们人类习惯的排序方式则非常有用。但当表单含有大量字段的时候，你更多的是想将表单划分为一些字段的集合。</p><p>再次修改<code>polls/admin.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>,               &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;question_text&#x27;</span>]&#125;),</span><br><span class="line">        (<span class="string">&#x27;Date information&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;pub_date&#x27;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将app模型加入admin站点管理</span></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure><p>字段集合<code>fieldsets</code>中每一个元组的第一个元素是该字段集合的标题。</p><p>如下图：</p><p><img src="C:\Users\Aiy52\AppData\Roaming\Typora\typora-user-images\image-20211015192358679.png" alt="image-20211015192358679"></p><h3 id="2-添加关联对象"><a href="#2-添加关联对象" class="headerlink" title="2. 添加关联对象"></a>2. 添加关联对象</h3><p>虽然我们已经有了Question的管理页面，但是一个Question有多个Choices，如果想显示Choices的内容怎么办？有两个办法可以解决这个问题。</p><p>第一个是像Question一样将Choice注册到admin站点，这很容易，修改<code>polls/admin.py</code>，增加下面的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Choice)</span><br></pre></td></tr></table></figure><p>重启服务器，再次访问admin页面，就可以看到Choice条目了。</p><p>点击它右边的增加按钮，进入“Add Choice”表单页面，如下图：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015193422116.png" alt="image-20211015193422116"></p><p>在这个表单中，Question字段是一个select选择框，包含了当前数据库中所有的Question实例。<strong>Django在admin站点中，自动地将所有的外键关系展示为一个select框。</strong>在我们的例子中，目前只有一个question对象存在。</p><p>请注意图中的绿色加号，它连接到Question模型。每一个包含外键关系的对象都会有这个绿色加号。点击它，会弹出一个新增Question的表单，类似Question自己的添加表单。填入相关信息点击保存后，Django自动将该Question保存在数据库，并作为当前Choice的关联外键对象。白话讲就是，新建一个Question并作为当前Choice的外键。</p><p>第二种方法在创建Question对象的时候就可以直接添加一些Choice，删除<code>polls/admin.py</code>中Choice模型对<code>register()</code>方法的调用。然后，编辑Question的内容，最后整个文件的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceInline</span>(<span class="params">admin.StackedInline</span>):</span></span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>,               &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;question_text&#x27;</span>]&#125;),</span><br><span class="line">        (<span class="string">&#x27;Date information&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;pub_date&#x27;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将app模型加入admin站点管理</span></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure><p>上面的代码相当于告诉Django，Choice对象将在Question管理页面进行编辑，默认情况，请提供3个Choice对象的编辑区域。</p><p>重启服务器，进入“Add question”页面，应该看到如下图所示：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015194854635.png" alt="image-20211015194854635"></p><p>在3个插槽的最后，还有一个<code>添加另一个 Choice</code>链接。点击它，又可以获得一个新的插槽。如果你想删除插槽，点击它最右边的灰色X图标即可。</p><p>这里还有点小问题。上面页面中插槽纵队排列的方式需要占据大块的页面空间，查看起来很不方便。为此，Django提供了一种扁平化的显示方式，你仅仅只需要修改一下<code>ChoiceInline</code>继承的类为<code>admin.TabularInline</code>替代先前的<code>StackedInline</code>类（其实，从类名上你就能看出两种父类的区别）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>重新刷新页面就可以看到如下图的排列方式：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015195515894.png" alt="image-20211015195515894"></p><p>注意“删除”列，它可以删除那些已有的Choice和新建的Choice。</p><h3 id="3-定制实例的列表页面"><a href="#3-定制实例的列表页面" class="headerlink" title="3. 定制实例的列表页面"></a>3. 定制实例的列表页面</h3><p>Question的添加和修改页面我们已经自定义得差不多了，下面让我们来装饰一下“实例列表”(change list)页面，该页面显示了当前系统中所有的questions实例。</p><p>该页面默认看起来是这样的：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015195916690.png" alt="image-20211015195916690"></p><p>通常，Django只显示<code>__str()__</code>方法指定的内容。但是很多时候，我们可能要同时显示一些别的内容。要实现这一目的，可以使用<code>list_display</code>属性，它是一个由字段组成的元组，其中的每一个字段都会按顺序显示在页面上，在<code>polls/admin.py</code>代码中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line"><span class="comment"># ...上面默认...</span></span><br><span class="line">list_display = (<span class="string">&#x27;question_text&#x27;</span>, <span class="string">&#x27;pub_date&#x27;</span>, <span class="string">&#x27;was_published_recently&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们把<code>was_published_recently()</code>方法的结果也显示出来。如下图：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211015200313966.png" alt="image-20211015200313966"></p><p>你可以点击每一列的标题，来根据这列的内容进行排序。但是<code>was_published_recently</code>这一列除外，不支持这种根据函数输出结果进行排序的方式。同时请注意，<code>was_published_recently</code>这一列的列标题默认是方法的名字，内容则是输出的字符串表示形式。</p><p>可以通过给方法提供一些属性来改进输出的样式，如下面所示。注意<strong>这次修改的是<code>polls/models.py</code>文件</strong>，不要搞错了！主要是增加了最后面三行内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span>(<span class="params">self</span>):</span></span><br><span class="line">        now = timezone.now()</span><br><span class="line">        <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br><span class="line">    </span><br><span class="line">    was_published_recently.admin_order_field = <span class="string">&#x27;pub_date&#x27;</span></span><br><span class="line">    was_published_recently.boolean = <span class="literal">True</span></span><br><span class="line">    was_published_recently.short_description = <span class="string">&#x27;Published recently?&#x27;</span></span><br></pre></td></tr></table></figure><p>重启服务器刷新页面查看效果：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211016093810840.png" alt="image-20211016093810840"></p><p>我们还可以使用<code>list_filter</code>属性，<strong>对显示结果进行过滤</strong>!</p><p>在<code>polls/admin.py</code>的QuestionAdmin中添加下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = [<span class="string">&#x27;pub_date&#x27;</span>]</span><br></pre></td></tr></table></figure><p>再次刷新change list页面，你会看到在页面右边多出了一个基于<code>pub_date</code>的过滤面板，如下图所示：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211016094011066.png" alt="image-20211016094011066"></p><p>根据你选择的过滤条件的不同，Django会在面板中添加不同的过滤选项。由于<code>pub_date</code>是一个<code>DateTimeField</code>，因此Django自动添加了这些日期选项。</p><p>还可以再添加一些搜索功能，同样在QuestionAdmin中添加下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = [<span class="string">&#x27;question_text&#x27;</span>]</span><br></pre></td></tr></table></figure><p>刷新页面查看效果，增加了搜索框：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211016094258278.png" alt="image-20211016094258278"></p><p>当输入搜索关键字后，Django会在<code>question_text</code>字段内进行搜索。只要你愿意，你可以使用任意多个搜索字段，Django在后台使用的都是SQL查询语句的LIKE语法，但是有限制的搜索字段有助于后台的数据库查询效率。</p><p>这个页面还自动提供分页功能，默认每页显示100条，只是我们的实例只有一个，所以不显示分页链接。</p><h3 id="4-定制Admin整体界面"><a href="#4-定制Admin整体界面" class="headerlink" title="4. 定制Admin整体界面"></a>4. 定制Admin整体界面</h3><p>在每一个项目的admin页面顶端都显示<code>Django管理</code>是很单调的，它仅仅是个占位文本。利用Django的模板系统，我们可以快速修改它</p><p>在<code>manage.py</code>文件同级下有一个<code>templates</code>目录，如果没有则自行创建。然后，打开设置文件<code>mysite/settings.py</code>，在TEMPLATES条目中有一个DIRS选项，同理没有的话自行添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&#x27;templates&#x27;</span>]<span class="comment"># 添加此行</span></span><br><span class="line">        ,</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>DIRS是一个文件系统目录的列表，是模板的搜索路径。当加载Django模板时，会在DIRS中进行查找。这里面的目录往往都是全局性的，区别于app自己内部的templates目录。</p><p>在templates目录中再创建一个admin目录，将<code>admin/base_site.html</code>模板文件拷贝到该目录内。这个HTML文件来自Django源码，它位于<code>django/contrib/admin/templates</code>目录内。（我的本机上时D:\python37\Lib\site-packages\django\contrib\admin\templates\admin）可供参考。事实上，如果你用的是Pycharm建立的虚拟环境，那么直接去<code>venv</code>目录中寻找即可。</p><p><strong>提示：</strong>如果你无法找到Django源代码文件的存放位置，可以使用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import django; print(django.__path__)&quot;</span><br></pre></td></tr></table></figure><p>更改编辑<code>base_site.html</code>文件，用你喜欢的站点名字替换掉<code>&#123;&#123; site_header|default:_(’Django administration’) &#125;&#125;</code>（包括两个大括号一起替换掉），代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">&quot;admin/base.html&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;% <span class="keyword">if</span> subtitle %&#125;&#123;&#123; subtitle &#125;&#125; | &#123;% endif %&#125;&#123;&#123; title &#125;&#125; | &#123;&#123; site_title|default:_(<span class="string">&#x27;Django site admin&#x27;</span>) &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block branding %&#125;</span><br><span class="line">&lt;h1 id=&quot;site-name&quot;&gt;&lt;a href=&quot;&#123;% url &#x27;admin:index&#x27; %&#125;&quot;&gt;投票后台管理&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block nav-<span class="keyword">global</span> %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，我们使用的是硬编码，强行改名为”投票后台管理”。但是在实际的项目中，你可以使用<code>django.contrib.admin.AdminSite.site_header</code>属性，方便的对这个页面title进行自定义。</p><p>具体操作如下，恢复<code>base_site.html</code>文件，不需要替换掉<code>&#123;&#123; site_header|default:_(’Django administration’) &#125;&#125;</code>，只需要在<code>polls/admin.py</code>中添加以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.AdminSite.site_header = <span class="string">&#x27;投票后台管理&#x27;</span></span><br></pre></td></tr></table></figure><p>admin全部具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;question_text&#x27;</span>]&#125;),</span><br><span class="line">        (<span class="string">&#x27;Date information&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;pub_date&#x27;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line">    list_display = (<span class="string">&#x27;question_text&#x27;</span>, <span class="string">&#x27;pub_date&#x27;</span>, <span class="string">&#x27;was_published_recently&#x27;</span>)</span><br><span class="line">    list_filter = [<span class="string">&#x27;pub_date&#x27;</span>]</span><br><span class="line">    search_fields = [<span class="string">&#x27;question_text&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将app模型加入admin站点管理</span></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br><span class="line">admin.AdminSite.site_header = <span class="string">&#x27;投票后台管理&#x27;</span></span><br></pre></td></tr></table></figure><p>刷新页面查看，会发现效果跟上面硬编码同样。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211016101445897.png" alt="image-20211016101445897"></p><blockquote><p><strong>提示</strong>：</p><ul><li><p>所有Django默认的admin模板都可以被重写，类似刚才重写<code>base_site.html</code>模板的方法一样，从源代码目录将HTML文件拷贝至你自定义的目录内，然后修改文件，或者一些修改可使用修改属性方法。</p></li><li><p>直接修改Django源码不是好的做法，所以我们不直接修改<code>base_site.html</code>模板，我们复制了一份模板，在其中修改了站点名字，为了让修改的模板能够自动替换原来的模板，我们创建了一个templates目录。</p></li><li><p>这个新建的template目录之所以能起作用，是因为我们在settings中配置了一个DIRS。</p></li></ul></blockquote><h2 id="十三、定制admin首页"><a href="#十三、定制admin首页" class="headerlink" title="十三、定制admin首页"></a>十三、定制admin首页</h2><p>默认情况下admin页面显示所有INSTALLED_APPS内并在admin应用中注册过的app，以字母顺序进行排序。</p><p>要定制admin首页，你需要重写<code>admin/index.html</code>模板，就像前面修改<code>base_site.html</code>模板的方法一样，从源码目录拷贝到你指定的目录内。编辑该文件，你会看到文件内使用了一个<code>app_list</code>模板变量。该变量包含了所有已经安装的Django应用。你可以硬编码链接到指定对象的admin页面，使用任何你认为好的方法，用于替代这个<code>app_list</code>。</p><h2 id="十四、总结"><a href="#十四、总结" class="headerlink" title="十四、总结"></a>十四、总结</h2><p>进行到这里，整个基本的投票Web应用就创建完成了，内部详细的细节可以自行学习完善，例如前端页面美观等，整个投票项目mysite，在Pycharm中的文件组织结构如下图所示，可以对比一下是否有不同。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211016103521291.png" alt="image-20211016103521291"></p><p>接下来可以继续深入学习，做出更高级的应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Django" scheme="https://www.orangecola.cn/categories/Django/"/>
    
    
    <category term="Django" scheme="https://www.orangecola.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>HTML5</title>
    <link href="https://www.orangecola.cn/posts/98f3a6d9/"/>
    <id>https://www.orangecola.cn/posts/98f3a6d9/</id>
    <published>2021-10-11T17:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="互联网的三大基石"><a href="#互联网的三大基石" class="headerlink" title="互联网的三大基石"></a>互联网的三大基石</h2><p>HTML(Hyper Text Markup Language)：超文本标记语言</p><p>HTTP(HyperText Transfer Protocol)：超文本传输协议</p><p>URL(Uniform Resource Location) ：统一资源定位符</p><h2 id="HTML的基本结构"><a href="#HTML的基本结构" class="headerlink" title="HTML的基本结构"></a>HTML的基本结构</h2><ul><li><code>&lt;head&gt; 与 &lt;/head&gt;</code>之间对当前⻚⾯的各种设置</li><li><code>&lt;html&gt; 与 &lt;/html&gt;</code>之间的文本描述网页</li><li><code>&lt;body&gt; 与 &lt;/body&gt;</code>之间的文本是可见的页面内容</li><li><code>&lt;h1&gt; 与 &lt;/h1 &gt;</code>之间的文本被显示为标题</li><li><code>&lt;p’&gt; 与 &lt;/p&gt;</code>之间的文本被显示为段落</li></ul><h3 id="lt-head-gt-元素："><a href="#lt-head-gt-元素：" class="headerlink" title="&lt;head&gt; 元素："></a><code>&lt;head&gt;</code> 元素：</h3><p>head标签作⽤于⽹⻚的头部，它的内容不会在正⽂中显示出来，主要完成对当前⻚⾯的各种设置</p><p>在head中常包含如下⼦标签：      </p><table><thead><tr><th>标签</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>&lt;title&gt;</code></td><td>定义了⽂档的标题</td><td><code>&lt;title&gt;本⽹⻚标题&lt;/title&gt;</code></td></tr><tr><td><code>&lt;base&gt;</code></td><td>定义了⻚⾯链接标签的默认链接地址</td><td><code>&lt;base href=&quot;http://www.****.com/&quot;&lt;br/&gt;target=&quot;_blank&quot;&gt;</code></td></tr><tr><td><code>&lt;link&gt;</code></td><td>定义了⼀个⽂档和外部资源之间的关系</td><td>导⼊CSS⽂件 <code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&lt;br/&gt;href=&quot;**.css&quot;/&gt;</code></td></tr><tr><td><code>&lt;meta&gt;</code></td><td>定义了HTML⽂档中的元数据</td><td>设置⽹⻚编码、关键字、描述<code>&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;br/&gt;&lt;meta name=&quot;Keywords&quot; content=&quot;关键字&quot;&lt;br/&gt;/&gt;&lt;br/&gt;&lt;meta name=&quot;Description&quot; content=&quot;简介、&lt;br/&gt;描述&quot; /&gt;</code></td></tr><tr><td><code>&lt;script&gt;</code></td><td>&gt; 定义了客户端的js脚本⽂件</td><td><code>&lt;script &gt;&lt;br/&gt; JavaScript脚本程序&lt;br/&gt;&lt;/script&gt;</code></td></tr><tr><td><code>&lt;style&gt;</code></td><td>定义了HTML⽂档的样式⽂件</td><td><code>&lt;style type=&quot;text/css&quot;&gt;&lt;br/&gt;嵌⼊css样式代码&lt;br/&gt;&lt;/style&gt;</code></td></tr></tbody></table><h3 id="lt-p-gt-元素："><a href="#lt-p-gt-元素：" class="headerlink" title="&lt;p&gt; 元素："></a><code>&lt;p&gt;</code> 元素：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 <code>&lt;p&gt;</code> 元素定义了 HTML 文档中的一个段落。</p><p>这个元素拥有一个开始标签 <code>&lt;p&gt;</code>，以及一个结束标签<code>&lt;/p&gt;</code>。</p><p>元素内容是：This is my first paragraph。</p><h3 id="lt-body-gt-元素："><a href="#lt-body-gt-元素：" class="headerlink" title="&lt;body&gt; 元素："></a><code>&lt;body&gt; </code>元素：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;This is my first paragraph.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;body&gt;</code> 元素定义了 HTML 文档的主体。</p><p>这个元素拥有一个开始标签 <code>&lt;body&gt;</code>，以及一个结束标签 <code>&lt;/body&gt;</code>。</p><p>元素内容是另一个 HTML 元素（p 元素）。</p><h3 id="lt-html-gt-元素："><a href="#lt-html-gt-元素：" class="headerlink" title="&lt;html&gt; 元素："></a><code>&lt;html&gt; </code>元素：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;This is my first paragraph.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;html&gt;</code> 元素定义了整个 HTML 文档。</p><p>这个元素拥有一个开始标签 <code>&lt;html&gt;</code>，以及一个结束标签 <code>&lt;/html&gt;</code>。</p><p>元素内容是另一个 HTML 元素（body 元素）。</p><h3 id="不要忘记结束标签"><a href="#不要忘记结束标签" class="headerlink" title="不要忘记结束标签"></a>不要忘记结束标签</h3><p>即使您忘记了使用结束标签，大多数浏览器也会正确地显示 HTML：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph</span><br><span class="line">&lt;p&gt;This is a paragraph</span><br></pre></td></tr></table></figure><p>上面的例子在大多数浏览器中都没问题，但不要依赖这种做法。忘记使用结束标签会产生不可预料的结果或错误。</p><p><strong>注释：</strong>未来的 HTML 版本不允许省略结束标签。</p><h3 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>标题（Heading）是通过 <code>&lt;h1&gt; - &lt;h6&gt; </code>等标签进行定义的。</p><p><code>&lt;h1&gt;</code> 定义最大的标题。<code>&lt;h6&gt;</code>定义最小的标题。</p><p><strong>实例:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h3><p><code>&lt;hr /&gt;</code> 标签在 HTML 页面中创建水平线。</p><p>hr 元素可用于分隔内容。</p><p><strong>实例:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-折行"><a href="#HTML-折行" class="headerlink" title="HTML 折行"></a>HTML 折行</h3><p>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 <code>&lt;br /&gt;</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is<span class="tag">&lt;<span class="name">br</span> /&gt;</span>a para<span class="tag">&lt;<span class="name">br</span> /&gt;</span>graph with line breaks<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超连接标签"><a href="#超连接标签" class="headerlink" title="超连接标签"></a>超连接标签</h3><p>超链接标签的作用（不会自动换行）</p><p>【1】实现不同页面之间的跳转</p><p>   href：指定跳转到目标资源的位置</p><p>   target：打开网页的方式</p><blockquote><p>_blank 新窗⼝<br>_parent ⽗窗⼝<br>_self 本窗⼝（默认）<br>_top 顶级窗⼝<br>framename 窗⼝名<br>title：⽂字提示属性（详情）</p></blockquote><p>【2】实现锚点功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--跳转到本地的资源位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;02body中常用标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>02标签测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--跳转到网络的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--锚点功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>返回底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常⽤⽂本标签如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>...<span class="tag">&lt;/<span class="name">hn</span>&gt;</span> 其中n为1--6的值。 标题标签（加粗、独⽴⾏）</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>...<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>...<span class="tag">&lt;/<span class="name">em</span>&gt;</span> 强调斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>...<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>...<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 强调加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">cite</span>&gt;</span> 作品的标题（引⽤）</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>...<span class="tag">&lt;/<span class="name">sub</span>&gt;</span> 下标 <span class="tag">&lt;<span class="name">sup</span>&gt;</span>...<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> 上标</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>...<span class="tag">&lt;/<span class="name">del</span>&gt;</span> 删除线</span><br></pre></td></tr></table></figure><p>HTML 中有⽤的字符实体</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20211011094203610.png" alt="image-20211011094203610"></p><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><p>常⻅格式化标签如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> 换⾏</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span> 换段</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span> ⽔平分割线</span><br><span class="line"></span><br><span class="line">列表：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span> ⽆序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ol</span>&gt;</span> 有序列表 其中type类型值：A a I i 1 start属性表示起始值</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span> 列表项</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dl</span>&gt;</span> ⾃定义列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dt</span>&gt;</span> ⾃定义列表头</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span> ⾃定义列表内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span> 常⽤于组合块级元素，以便通过 CSS 来对这些元素进⾏格式化</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 常⽤于包含的⽂本，您可以使⽤ CSS 对它定义样式，或者使⽤ JavaScript 对</span><br><span class="line">它进⾏操作。</span><br></pre></td></tr></table></figure><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--相对路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绝对路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\\HBuilderProjects\\my01HTML\\img\\1.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网络路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/bd_logo1.png&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--参照物--&gt;</span></span><br><span class="line">6666</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片显示错误&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">8888</span><br></pre></td></tr></table></figure><p>img (不会自动的换行)</p><ul><li><p>src:引入图片的位置{相对路径、绝对路径、网络路径 }</p></li><li><p>title：图片的标题</p></li><li><p>border:图片的边框</p></li><li><p>alt：图片无法正常显示的时候显示的属性</p></li><li><p>align:图片的位置 ，必须有参照物</p></li></ul><p><strong>理解绝对路径 和相对路径 :</strong></p><ul><li><p>绝对路径：<br>绝对路径就是你的主⻚上的⽂件或⽬录在硬盘上真正的路径，(URL和物理路径)<br>例如：<br>C:\xyz\test.txt 代表了test.txt⽂件的绝对路径。<br><a href="http://www.sun.com/index.htm%E4%B9%9F%E4%BB%A3%E8%A1%A8%E4%BA%86%E2%BC%80%E4%B8%AAURL%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E3%80%82">http://www.sun.com/index.htm也代表了⼀个URL绝对路径。</a></p></li><li><p>相对路径：<br>相对与某个基准⽬录的路径。包含Web的相对路径（HTML中的相对⽬录）</p><p>例如：<br>在Web开发中，”/“代表Web应⽤的根⽬录。<br>和物理路径的相对表示，例如：”./“ 代表当前⽬录，”../“代表上级⽬录。这种类似的表示，也是属于相对路径。</p></li></ul><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><table><thead><tr><th>表格</th><th>描述</th><th>常⽤属性</th></tr></thead><tbody><tr><td><code>&lt;table&gt;</code></td><td>定义表格</td><td>border、width、cellspacing、cellpadding</td></tr><tr><td><code>&lt;caption&gt;</code></td><td>定义表格标题</td><td>align排列⽅式</td></tr><tr><td><code>&lt;th&gt;</code></td><td>定义表格的表头</td><td>align,valign,bgcolor、rowspan、colspan、width、height</td></tr><tr><td><code>&lt;tr&gt;</code></td><td>定义表格的⾏</td><td>align,valign,bgcolor</td></tr><tr><td><code>&lt;td&gt;</code></td><td>定义表格单元格</td><td>lign,valign,bgcolor、rowspan、colspan、width、height</td></tr><tr><td><code>&lt;thead&gt;</code></td><td>定义表格的⻚眉</td><td>align,valign</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td>定义表格的主体</td><td>align,valign</td></tr><tr><td><code>&lt;tfoot&gt;</code></td><td>定义表格的⻚脚</td><td>align,valign</td></tr></tbody></table><p>table表格的自适应能力 (align=”center”)整个的表格整体居中</p><ul><li><p>cellpadding：内容和单元格的距离 </p></li><li><p>cellspacing：单元格和单元格的距离</p></li><li><p>colspan：列合并</p></li><li><p>rowspan：行合并 </p></li><li><p>bgcolor：背景颜色</p></li></ul><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;bisque&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">&quot;aqua&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1--2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>6--9<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>(1) <code>&lt;form&gt;...&lt;/form&gt;</code> 表单标签</p><p>form标签常⽤属性：<br> action属性:提交的⽬标地址(URL)<br> method属性:提交⽅式:get(默认)和post<br>     get⽅式是URL地址栏可⻅,⻓度受限制(IE2k ⽕狐8k),相对不安全.<br>     post⽅式是URL地址不可⻅,⻓度不受限制,相对安全.<br> enctype:提交类型<br> target: 在何处打开⽬标 URL。<br> name:属性为表单起个名字.在HTML5中使⽤ id 代替。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;02body中常用标签.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--普通文本框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>action：表单提交的位置</p><p>method（get/post）：表单提交的方式，有get和post。</p><p>get：</p><ul><li><p>(1)参数会依附于url地址之后</p></li><li><p>(2)利用get方式提交数据，数据的长度有限制</p></li><li><p>(3)利用get方式提交数据，是不安全的</p></li></ul><p>post：</p><ul><li><p>(1)请求不会依附于地址</p></li><li><p>(2)利用post处理参数不受限制</p></li><li><p>(3)post提交数据比较安全</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--普通文本框  value：文本框中值--&gt;</span></span><br><span class="line">账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;zh&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单选框  实现单选的效果必须指定同一个name属性   checked：默认的选择--&gt;</span></span><br><span class="line"></span><br><span class="line">男：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span></span><br><span class="line">女：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--多选框--&gt;</span></span><br><span class="line">   </span><br><span class="line">抽烟:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">喝酒:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">烫头:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--多行文本框--&gt;</span></span><br><span class="line">    </span><br><span class="line">个人介绍： <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;15&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--文件选择框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--隐藏框--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sno&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20180607&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--下拉框  selected：默认的选择--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;ch&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>新加坡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--清除按钮,清空写好的内容--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清除&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--普通的按钮  没有提交数据的功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) <code>&lt;input&gt;</code> 表单项标签input定义输⼊字段，⽤户可在其中输⼊数据。在 HTML 5 中，type 属性有很<br>多新的值。</p><blockquote><p> 具体在下⾯有详解：<br> 如：<code>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</code><br> *type属性:表示表单项的类型:值如下:<br>     text:单⾏⽂本框<br>     password:密码输⼊框<br>     checkbox:多选框 注意要提供value值<br>     radio:单选框 注意要提供value值<br>     file:⽂件上传选择框<br>     button:普通按钮<br>     submit:提交按钮<br>     image:图⽚提交按钮<br>     reset:重置按钮, 还原到开始(第⼀次打开时)的效果<br>     hidden:主表单隐藏域,要是和表单⼀块提交的信息,但是不需要用户修改<br>     email ⽤于应该包含 e-mail 地址的输⼊域<br>     url ⽤于应该包含 URL 地址的输⼊域<br>     number ⽤于应该包含数值的输⼊域。<br>     max 规定允许的最⼤值<br>     min 规定允许的最⼩值<br>     step 规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）<br>     value 规定默认值<br>     range ⽤于应该包含⼀定范围内数字值的输⼊域，显示为滑动条<br>     max 规定允许的最⼤值<br>     min 规定允许的最⼩值<br>     step 规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）<br>     value 规定默认值<br>     ⽇期选择器 Date pickers<br>         date - 选取⽇、⽉、年<br>         month - 选取⽉、年</p></blockquote><p>(3)     <code>&lt;select&gt;...&lt;/select&gt;</code> 标签创建下拉列表。</p><blockquote><p>name属性:定义名称,⽤于存储下拉值的 size：定义菜单中可⻅项⽬的数⽬，html5不⽀持 disabled 当该属性为 true 时，会禁⽤该菜单。 multiple 多选 …  下拉选择项标签,⽤于嵌⼊到标签中使⽤的; *value属性:下拉项的值 *selected属性:默认下拉指定项. </p></blockquote><p>(4) <code>&lt;textarea&gt;...&lt;/textarea&gt; </code>多⾏的⽂本输⼊区域</p><blockquote><p> name :定义名称,⽤于存储⽂本区域中的值。 cols ：规定⽂本区内可⻅的列数。 rows ：规定⽂本区内可⻅的⾏数。 disabled： 是否禁⽤ readonly： 只读 … 默认值是在两个标签之间</p></blockquote><p>(5) <code>&lt;button&gt;...&lt;/button&gt;</code>标签定义按钮。</p><blockquote><p>您可以在 button 元素中放置内容，⽐如⽂档或图像。这是该元素与由 input 元素创建的按钮的不同之处</p></blockquote><p>(6) <code>&lt;fieldset&gt;</code> —fieldset元素可将表单内的相关元素分组。</p><blockquote><p> disabled属性：定义 fieldset 是否可⻅。 form属性： 定义该 fieldset 所属的⼀个或多个表单。</p></blockquote><p>(7) <code>&lt;legend&gt;&lt;/legend&gt;</code>标签为<code>&lt;fieldset&gt;</code>、<code>&lt;figure&gt;</code>以及<code>&lt;details&gt;</code>元素定义标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">legend</span>&gt;</span>个⼈信息：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"> 姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"> 年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">legend</span>&gt;</span>健康信息：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"> 身⾼：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"> 体重：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(8)  html5标签–<code>&lt;optgroup&gt;&lt;/optgroup&gt;</code>标签定义选项组。此元素允许您组合选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">城市：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;河北省&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>⽯家庄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>廊坊<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;河南省&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>郑州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>安阳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>周⼝<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(9)  html5标签–<code>&lt;datalist&gt;&lt;/datalist&gt;</code>标签定义可选数据的列表。与 input 元素配合使⽤，就可以 制作出输⼊值的下拉列表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"> 搜索：</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">list</span>=<span class="string">&quot;namelist&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;namelist&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zhangsanfeng&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zhangwuji&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lixiaolong&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h3><blockquote><p>属性：src：规定在 iframe 中显示的⽂档的 URL name：规定 iframe 的名称 height：规定 iframe 的⾼度。 width：定义 iframe 的宽度。 frameborder：规定是否显示框架周围的边框。</p></blockquote><h4 id="iFrame"><a href="#iFrame" class="headerlink" title="iFrame"></a>iFrame</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--target为框架名字会在框架内显示内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;ifm&quot;</span>&gt;</span>01<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;02body中常用标签.html&quot;</span>&gt;</span>02<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;03body中常用的小标签.html&quot;</span>&gt;</span>03<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--框架标签  width宽度，height高度，name名字，src为默认显示路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;700px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;450px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ifm&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性：</p><ul><li>src：规定在 iframe 中显示的文档的 URL</li><li>name：规定 iframe 的名称</li><li>height：规定 iframe 的高度</li><li>width：定义 iframe 的宽度</li><li>frameborder：规定是否显示框架周围的边框</li></ul><h4 id="Frameset"><a href="#Frameset" class="headerlink" title="Frameset"></a>Frameset</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;150px,*,100px&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--顶部部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;admin/top.html&quot;</span> <span class="attr">noresize</span>=<span class="string">&quot;noresize&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中间部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;10%,*&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左侧部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;admin/left.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--右侧部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;admin/right.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rig&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--底部部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;admin/bottom.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML5表单增强标签"><a href="#HTML5表单增强标签" class="headerlink" title="HTML5表单增强标签"></a>HTML5表单增强标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮箱属性--&gt;</span></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数字属性--&gt;</span></span><br><span class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--滑动器属性--&gt;</span></span><br><span class="line">滑动器：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--搜索属性--&gt;</span></span><br><span class="line">搜索：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日期属性--&gt;</span></span><br><span class="line">日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日期 周--&gt;</span></span><br><span class="line">日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日期 月份--&gt;</span></span><br><span class="line">日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>表单增加属性<br>    placeholder：添加默认文字<br>    autofocus：光标自动定位到该处<br>    max：最大值/ min：最小值<br>    maxlength：字符最大长度<br>    minlength：字符最小长度</p><h2 id="HTML5结构增强标签"><a href="#HTML5结构增强标签" class="headerlink" title="HTML5结构增强标签"></a>HTML5结构增强标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--增强结构标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--头部模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中间提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中间的展现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--底部模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML5引入多媒体标签"><a href="#HTML5引入多媒体标签" class="headerlink" title="HTML5引入多媒体标签"></a>HTML5引入多媒体标签</h2><ol><li><strong>引入视频标签</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持Video标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>video 元素提供了 播放、暂停和音量控件来控制视频。</p></li><li><p>同时 <code>&lt;video&gt; </code>元素也提供了 width 和 height 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。</p></li><li><p>标签之间插入的内容是提供给不支持 video 元素的浏览器显示的。</p></li><li><p>video 元素支持多个 source 元素. source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。</p></li></ul><ol start="2"><li><strong>引入音频标签</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持 audio 元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>control 属性供添加播放、暂停和音量控件。</p></li><li><p>在<code>&lt;audio&gt;</code> 与 <code>&lt;/audio&gt;</code> 之间你需要插入浏览器不支持的<code>&lt;audio&gt;</code>元素的提示文本 。</p></li><li><p>audio 元素允许使用多个 source 元素. source 元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件。</p></li></ul><ol start="3"><li><strong>引入多媒体标签</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多媒体引入标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;music/1.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>HTML5中其他标签</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--figure规定独立的流内容（图像、图表、照片、代码等等）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/蜡笔小新比大象.gif&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义图像标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>蜡笔小新<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--展示文章细节标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--默认文字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--选项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>01<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mark 着重突出的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">mark</span>&gt;</span>02<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>03<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>04<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--刻度标签</span></span><br><span class="line"><span class="comment">max：规定的最大值</span></span><br><span class="line"><span class="comment">min：规定的最小值</span></span><br><span class="line"><span class="comment">value：当前的值</span></span><br><span class="line"><span class="comment">low：自己定的最小值</span></span><br><span class="line"><span class="comment">high：自己定义的最大值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> <span class="attr">low</span>=<span class="string">&quot;20&quot;</span> <span class="attr">high</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--进度条标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;datalist&gt; 标签规定了 &lt;input&gt; 元素可选的选项列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;city&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;04&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--画布标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;mycat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--javascript在画布中绘画正方形--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ca=<span class="built_in">document</span>.getElementById(<span class="string">&quot;mycat&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> te=ca.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//背景颜色</span></span></span><br><span class="line"><span class="javascript">te.fillStyle=<span class="string">&quot;aqua&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//绘制图形的大小,x坐标0，y坐标0，80宽，100高</span></span></span><br><span class="line">te.fillRect(0,0,80,100);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新增布局标签"><a href="#新增布局标签" class="headerlink" title="新增布局标签"></a>新增布局标签</h2><table><thead><tr><th>标签</th><th>作⽤</th></tr></thead><tbody><tr><td>header</td><td>定义⽂档的⻚眉</td></tr><tr><td>nav</td><td>定义导航链接部分</td></tr><tr><td>footer</td><td>定义⽂档或者节的⻚脚/底部</td></tr><tr><td>section</td><td>定义⽂档中的节（section/段落）</td></tr><tr><td>aside</td><td>定义其所处内容之外的内容/侧边</td></tr><tr><td>datalist</td><td>定义选项列表，与input 配合使⽤该标签，两者通过id关联</td></tr><tr><td>fieldset</td><td>可将表单内的相关元素打包/分组, 与legend 搭配使⽤</td></tr><tr><td>article</td><td>定义⽂章</td></tr></tbody></table><h2 id="新增的input-type属性值"><a href="#新增的input-type属性值" class="headerlink" title="新增的input type属性值"></a>新增的input type属性值</h2><blockquote><p>这些新增的类型，更加细化的限定了输⼊内容，如果输⼊格式不对，在提交的时候会⾃动给出相应提示</p></blockquote><table><thead><tr><th>类型</th><th>示例</th><th>含义</th><th>效果</th></tr></thead><tbody><tr><td>emai</td><td><code>&lt;input type=&quot;email&quot;&gt;</code></td><td>输⼊邮箱格式</td><td><input type="email"></td></tr><tr><td>tel</td><td><code>&lt;input type=&quot;tel&quot;&gt;</code></td><td>输⼊⼿机号</td><td><input type="tel"></td></tr><tr><td>url</td><td><code>&lt;input type=&quot;url&quot;&gt;</code></td><td>输⼊url</td><td><input type="url"></td></tr><tr><td>number</td><td><code>&lt;input type=&quot;number&quot;&gt;</code></td><td>输⼊数字</td><td><input type="number"></td></tr><tr><td>search</td><td><code>&lt;input type=&quot;search&quot;&gt;</code></td><td>搜索框（体现语义化）</td><td><input type="search"></td></tr><tr><td>range</td><td><code>&lt;input type=&quot;range&quot;&gt;</code></td><td>⾃由拖动的滑块</td><td><input type="range"></td></tr><tr><td>time</td><td><code>&lt;input type=&quot;time&quot;&gt;</code></td><td>输⼊⼩时 分钟</td><td><input type="time"></td></tr><tr><td>date</td><td><code>&lt;input type=&quot;date&quot;&gt;</code></td><td>输⼊年 ⽉ ⽇</td><td><input type="date"></td></tr><tr><td>datetime</td><td><code>&lt;input type=&quot;datetime&quot;&gt;</code></td><td>输⼊ ⽇期 时间</td><td><input type="datetime"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="HTML" scheme="https://www.orangecola.cn/categories/HTML/"/>
    
    
    <category term="HTML" scheme="https://www.orangecola.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>如何将Python程序打包</title>
    <link href="https://www.orangecola.cn/posts/ad99f8c1/"/>
    <id>https://www.orangecola.cn/posts/ad99f8c1/</id>
    <published>2021-10-03T14:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>将python程序打包成exe文件，可以使用pyinstaller模块实现将python项目打包成exe文件。</p><p>1.安装pyinstaller模块</p><p>在pycharm中操作：file–&gt;setting–&gt;Project: xxx–&gt;Project interpretor，再点击+即可。</p><p>2.在pycharm的Terminal终端输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F XXX.PY</span><br></pre></td></tr></table></figure><p>【提示】相关参数</p><p>–icon=图标路径 （pyinstaller -F –icon=pytt.ico xxx.py) ：更换图标</p><p>-F 打包成一个exe文件</p><p>-w 使用窗口，无控制台</p><p>-c 使用控制台，无窗口</p><p>-D 创建一个目录，里面包含exe以及其他一些依赖性文件</p><p>3.在项目的dist目录下可以看到生成的exe文件，可直接在windows系统中使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://www.orangecola.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.orangecola.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop基础模式搭建</title>
    <link href="https://www.orangecola.cn/posts/a250e24a/"/>
    <id>https://www.orangecola.cn/posts/a250e24a/</id>
    <published>2021-10-02T16:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、关于Hadoop"><a href="#一、关于Hadoop" class="headerlink" title="一、关于Hadoop"></a>一、关于Hadoop</h2><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。</p><p><strong>Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。</strong></p><p>HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。</p><p><strong>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。</strong></p><p><strong>Hadoop解决哪些问题？</strong></p><ul><li><p>海量数据需要及时分析和处理</p></li><li><p>海量数据需要深入分析和挖掘</p></li><li><p>数据需要长期保存</p></li></ul><p><strong>海量数据存储的问题：</strong></p><ul><li><p>磁盘IO称为一种瓶颈，而非CPU资源</p></li><li><p>网络带宽是一种稀缺资源</p></li><li><p>硬件故障成为影响稳定的一大因素</p></li></ul><p><strong>HDFS采用master/slave架构</strong></p><p><strong>Hadoop的三种运行模式 ：</strong></p><blockquote><ol><li><p>独立（本地）运行模式：无需任何守护进程，所有的程序都运行在同一个JVM上执行。在独立模式下调试MR程序非常高效方便。所以一般该模式主要是在学习或者开发阶段调试使用 。</p></li><li><p>伪分布式模式：  Hadoop守护进程运行在本地机器上，模拟一个小规模的集群，换句话说，可以配置一台机器的Hadoop集群,伪分布式是完全分布式的一个特例。</p></li><li><p>完全分布式模式：Hadoop守护进程运行在一个集群上。</p></li></ol></blockquote><p><strong>HDFS的主要模块</strong></p><ol><li><p>NameNode:</p><p>功能：是整个文件系统的管理节点。维护整个文件系统的文件目录数，文件/目录的源数据和每个文件对应的数据快列表。用于接受用户的请求。</p></li><li><p>DataNode:</p><p>是HA（高可用性）的一个解决方案，是备用镜像，但不支持热设备</p></li></ol><p><strong>注意：</strong>在本地模式下,将使用本地文件系统和本地MapReduce运行器。在分布式模式下，将启动HDFS和YARN守护进程。</p><h2 id="二、hadoop本地模式"><a href="#二、hadoop本地模式" class="headerlink" title="二、hadoop本地模式"></a>二、hadoop本地模式</h2><ol><li><p><strong>首先下载jdk和hadoop包。</strong></p><p>hadoop-2.6.0.tar.gz</p><p>jdk-8u144-linux-x64.tar.gz</p><p>百度云：<a href="https://pan.baidu.com/s/15QXS1ScOG1kOHBOCalgq7Q">https://pan.baidu.com/s/15QXS1ScOG1kOHBOCalgq7Q</a><br>提取码：1dc7</p></li><li><p><strong>上传包到虚拟机并解压</strong></p><p>使用ftp软件连接虚拟机，将下载的jdk和hadoop包上传到虚拟机中。</p><p>将两个包解压到/root/hadoop_sft</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-2.6.0.tar.gz -C /root/hadoop_sft</span><br><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /root/hadoop_sft</span><br></pre></td></tr></table></figure></li><li><p><strong>配置信息</strong></p><p>本地模式有2个文件修改配置</p><ol><li><p>修改 .bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">HADOOP_HOME=/root/hadoop_sft/hadoop-2.6.0</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME</span><br><span class="line"></span><br><span class="line">PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>接下来使修改生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>修改hadoop-env.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>修改第25行export JAVA_HOME=${JAVA_HOME}，将${JAVA_HOME}替换成jdk的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>进行测试</strong></p><ol><li><p>先在/root/下建一个t1.txt 文本文件，往里面放入包含不同单词。</p></li><li><p>cd切换到mapreduce目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/share/hadoop/mapreduce/</span><br></pre></td></tr></table></figure></li><li><p>执行jar包里的wordcount程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.6.0.jar wordcount /root/t1.txt ./out</span><br></pre></td></tr></table></figure></li><li><p>out目录生成part-r-00000和_SUCCESS两个文件，进入./out查看，part-r-00000文件可以看到分词情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./out</span><br><span class="line">cat part-r-00000</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、伪分布式模式"><a href="#三、伪分布式模式" class="headerlink" title="三、伪分布式模式"></a>三、伪分布式模式</h2><p>​    伪分布式模式在本地模式的基础上进行配置，本地模式已经做完一，二步，所有我们直接从第三步开始配置。</p><ol><li><p><strong>配置信息</strong></p><p>本地模式有6个文件修改配置</p><ol><li><p>修改 .bash_profile（本地模式改过了此处忽略）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">HADOOP_HOME=/root/hadoop_sft/hadoop-2.6.0</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME</span><br><span class="line"></span><br><span class="line">PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>接下来使修改生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>修改hadoop-env.sh（本地模式改过了此处忽略）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>修改第25行export JAVA_HOME=${JAVA_HOME}，将${JAVA_HOME}替换成jdk的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/hadoop_sft/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li><li><p>修改hdfs-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">.property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改core-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 先在hadoop-2.6.0目录中创建tmp文件夹</span></span><br><span class="line">mkdir tmp</span><br><span class="line">vim etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://(本机ip):9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop_sft/hadoop-2.6.0/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改mapred-site.xml</p><p>先将mapred-site.xml.template复制为mapred-site.xml放到同目录下，再编辑修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp etc/hadoop/mapred-site.xml.template etc/hadoop/mapred-site.xml</span><br><span class="line">vim etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">vim etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure><p>在<configuration></configuration>之间增加配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>设置免密登录</strong></p><p>生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>测试免密登陆成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@(本机ip)</span><br></pre></td></tr></table></figure></li><li><p><strong>Hadoop的进行初始化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure></li><li><p><strong>启动服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>进行测试</strong></p><ol><li><p>先在/root/下建一个t1.txt 文本文件，往里面放入包含不同单词。</p></li><li><p>cd切换到mapreduce目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/hadoop_sft/hadoop-2.6.0/share/hadoop/mapreduce/</span><br></pre></td></tr></table></figure></li><li><p>执行jar包里的wordcount程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.6.0.jar wordcount /root/t1.txt ./out</span><br></pre></td></tr></table></figure></li><li><p>out目录生成part-r-00000和_SUCCESS两个文件，进入./out查看，part-r-00000文件可以看到分词情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ./out</span><br><span class="line">ls</span><br><span class="line">cat part-r-00000</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="四、完全分布式"><a href="#四、完全分布式" class="headerlink" title="四、完全分布式"></a>四、完全分布式</h2><p>搭建分布式主要用三台虚拟机：hadoop01、hadoop02、hadoop03，所以我们将第一台虚拟机再克隆出两台，配置NAT网络，记下三台虚拟机的IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.171.129</span><br><span class="line">192.168.171.130</span><br><span class="line">192.168.171.131</span><br></pre></td></tr></table></figure><ol><li><p><strong>配置虚拟机的hostname</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>插入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=hadoop01</span><br></pre></td></tr></table></figure><p>修改hosts文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.171.129  hadoop01</span><br><span class="line">192.168.171.130  hadoop02</span><br><span class="line">192.168.171.131  hadoop03</span><br></pre></td></tr></table></figure><p><strong>需要把以上hosts配置到windows的hosts文件中，不然在windows开发时连接不上hdfs</strong></p></li><li><p><strong>设置免密登录</strong></p><p>给每一台虚拟机都生成设置免密登录</p><p>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>测试免密登陆成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@(本机ip)</span><br></pre></td></tr></table></figure><p>在.ssh文件夹下会有id_rsa与id_rsa.pub两个文件，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将公钥保存到认证文件中（认证文件名一定不能打错），最后将其余两台机器的公钥也复制进来，组成免密访问。</p><h2 id="余下待补充"><a href="#余下待补充" class="headerlink" title="余下待补充"></a>余下待补充</h2></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hadoop" scheme="https://www.orangecola.cn/categories/Hadoop/"/>
    
    
    <category term="Hadoop" scheme="https://www.orangecola.cn/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>深入理解TCP三次握手和四次挥手</title>
    <link href="https://www.orangecola.cn/posts/aedc73f1/"/>
    <id>https://www.orangecola.cn/posts/aedc73f1/</id>
    <published>2021-10-02T16:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>tcp协议是web开发最重要而又最基础的知识，那么tcp的三次握手和四次挥手理解了吗，接下来一起深入学习理解一下。</p><h2 id="TCP连接和断开整体图"><a href="#TCP连接和断开整体图" class="headerlink" title="TCP连接和断开整体图"></a>TCP连接和断开整体图</h2><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210712093707571.png" alt="image-20210712093707571"></p><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><ol><li><p>请求端（通常称为客户）发送一个SYN段指明客户打算连接的服务器的端口，以及初始序号（ISN，在这个例子中为1415531521）。这个SYN段为报文段1。</p></li><li><p>服务器发回包含服务器的初始序号的SYN报文段（报文段2作为应答。同时，将确认序号设置为客户的ISN加1以对客户的SYN报文段进行确认。一个SYN将占用一个序号。</p></li><li><p>客户必须将确认序号设置为服务器的ISN加1以对服务器的SYN报文段进行确认（报文段3）。这三个报文段完成连接的建立。这个过程也称为三次握手（ three-way handshake）。</p></li></ol><p><strong>问题一：第二次、第三次握手失败会怎么样？</strong></p><p>如果握手失败服务端会等待客户端重新连接，这时候服务端处于半关闭状态。如果出现大量的半关闭连接，会耗尽服务器的连接资源数，导致请求无法进来。也就是所谓的DDOS攻击。</p><h2 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h2><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210712094403688.png" alt="image-20210712094403688"></p><p><strong>整体流程如下：</strong></p><ol><li>客户端发起断开，向服务器发送FIN</li><li>当服务器收到这个FIN，它返回客户端ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</li><li>同时TCP服务器还向应用程序（即丢弃服务器）传送一个文件结束符。接着这个服务器程序就关闭它的连接，导致它的TCP端发送一个FIN，</li><li>客户必须返回一个ACK确认，并将确认序号设置为收到序号加1。</li></ol><p><strong>问题二：为什么需要四次挥手，两次挥手为什么不行？</strong></p><p>建立一个连接需要三次握手，而终止一个连接要经过4次握手。这由TCP的半关闭（halfclose）造成的。既然一个TCP连接是全双工（即数据在两个方向上能同时传递），因此每个方向必须单独地进行关闭。这原则就是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向连接。当一端收到一个FIN，它必须通知应用层另一端已经终止了那个方向的数据传送。<br>收到一个FIN只意味着在这一方向上没有数据流动。一个TCP连接在收到一个FIN后仍能发送数据。因此需要两个方向都收到FIN。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="TCP" scheme="https://www.orangecola.cn/categories/TCP/"/>
    
    <category term="网络基础" scheme="https://www.orangecola.cn/categories/TCP/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="TCP" scheme="https://www.orangecola.cn/tags/TCP/"/>
    
    <category term="网络基础" scheme="https://www.orangecola.cn/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python操作数据库</title>
    <link href="https://www.orangecola.cn/posts/a2ba319e/"/>
    <id>https://www.orangecola.cn/posts/a2ba319e/</id>
    <published>2021-10-02T15:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="操作SQLite3数据库"><a href="#操作SQLite3数据库" class="headerlink" title="操作SQLite3数据库"></a>操作SQLite3数据库</h2><p>python3标准库中内置了SQLite3模块，可以支持SQLite3数据库的访问和相关数据库操作。</p><h3 id="python操作SQLite3数据库的基本流程"><a href="#python操作SQLite3数据库的基本流程" class="headerlink" title="python操作SQLite3数据库的基本流程"></a>python操作SQLite3数据库的基本流程</h3><p>1.导入相关库或模块。</p><p>2.使用connect()连接数据库并获取数据库连接对象</p><p>connect提供的方法：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.cursor()</td><td align="center">创建一个游标对象</td></tr><tr><td align="center">.commit()</td><td align="center">处理事务提交</td></tr><tr><td align="center">.rollback()</td><td align="center">处理事务回滚</td></tr><tr><td align="center">.close()</td><td align="center">关闭一个数据库连接</td></tr></tbody></table><p>3.使用con.cursor()获取游标对象。</p><p>4.使用游标对象的方法(execute()、executemany()、fetchall()等)来操作数据库，实现插入、修改和删除操作，并查询获取显示相关的记录。</p><p>在python程序中，连接函数sqlite3.connect()有两个常用参数：</p><ul><li>database：表示要访问的数据库名。</li><li>timeout：表示访问数据的超时设定。</li></ul><p>5.使用close()关闭游标对象和数据库连接，数据库操作完成之后，必须关闭数据库连接，这样可以减轻数据库服务器压力。</p><h3 id="使用sqlite3创建表"><a href="#使用sqlite3创建表" class="headerlink" title="使用sqlite3创建表"></a>使用sqlite3创建表</h3><p>使用sqlite3模块的connect方法创建或打开数据库，需要指定数据库路径，不存在则会创建一个新的数据库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&#x27;e:/sqlitedb/first.db&#x27;</span>)</span><br></pre></td></tr></table></figure><p>例：使用sqlite3创建表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 执行sql创建表，编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;create table t_person(</span></span><br><span class="line"><span class="string">            pno INTEGER PRIMARY KEY autoincrement,</span></span><br><span class="line"><span class="string">            panme VARCHAR NOT NULL,</span></span><br><span class="line"><span class="string">            age INTEGER</span></span><br><span class="line"><span class="string">            )&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    print(<span class="string">&quot;创建表成功&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;创建失败&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用sqlite3插入数据"><a href="#使用sqlite3插入数据" class="headerlink" title="使用sqlite3插入数据"></a>使用sqlite3插入数据</h3><p>调用游标对象的execute()方法执行插入的sql，使用executemany()执行多条sql语句，使用executemany()比循环使用execute()执行多条sql语句效率高。</p><p>例1：使用sqlite3插入一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;insert into t_person(pname, age) values(?, ?)&quot;</span>   <span class="comment"># ? 为传值占位符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>))    <span class="comment"># 值需要用元组类型括起来</span></span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><p>例2：使用sqlite3插入多条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;insert into t_person(pname, age) values(?, ?)&quot;</span>   <span class="comment"># ? 为传值占位符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    <span class="comment"># 执行插入多条数据sql语句</span></span><br><span class="line">    cur.executemany(sql, [(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>), (<span class="string">&quot;小明&quot;</span>, <span class="number">24</span>), (<span class="string">&quot;无名&quot;</span>, <span class="number">25</span>)])  <span class="comment"># 多组值需要用列表类型括起来</span></span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入多条数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="使用sqlite3查询数据"><a href="#使用sqlite3查询数据" class="headerlink" title="使用sqlite3查询数据"></a>使用sqlite3查询数据</h3><p>游标对象提供了fetchall()和fetchone()方法查询数据库数据，fetchall()方法获得所有数据，返回一个列表，fetchone()方法获取其中一个结果，返回一个元组。</p><p>例1：fetchall()查询所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">&quot;select * from t_person&quot;</span>  <span class="comment"># sql查询语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询数据</span></span><br><span class="line">    person_all = cur.fetchall()  <span class="comment"># 返回一个列表</span></span><br><span class="line">    <span class="comment"># 遍历列表</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> person_all:</span><br><span class="line">        print(p)</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><p>例2：fetchone()查询一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">&quot;select * from t_person&quot;</span>  <span class="comment"># sql查询语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询数据</span></span><br><span class="line">    person_one = cur.fetchone()  <span class="comment"># 返回一个元组</span></span><br><span class="line">    print(person_one)</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="使用sqlite3修改或删除数据"><a href="#使用sqlite3修改或删除数据" class="headerlink" title="使用sqlite3修改或删除数据"></a>使用sqlite3修改或删除数据</h3><p>例1：修改一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写删除数据的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;update t_person set pname=? where pno=?&quot;</span>  <span class="comment"># sql修改语句，pno为第几条数据传值占位符</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;张宇&quot;</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;修改数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;修改数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><p>例2：删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;e:/sqlite3Demo/demo.db&quot;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写删除数据的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;delete from t_person where pno=?&quot;</span>  <span class="comment"># 删除语句，pno为第几条数据传值占位符</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="number">1</span>,))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;删除数据成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;删除数据失败&quot;</span>)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="Python调用Pymysql库使用Mysql"><a href="#Python调用Pymysql库使用Mysql" class="headerlink" title="Python调用Pymysql库使用Mysql"></a>Python调用Pymysql库使用Mysql</h2><h3 id="python安装pymysql"><a href="#python安装pymysql" class="headerlink" title="python安装pymysql"></a>python安装pymysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库创建表"><a href="#操作Pymysql数据库创建表" class="headerlink" title="操作Pymysql数据库创建表"></a>操作Pymysql数据库创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写创建表的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        create table t_student(</span></span><br><span class="line"><span class="string">        son int primary key auto_increment,</span></span><br><span class="line"><span class="string">        sname varchar(30) not null,</span></span><br><span class="line"><span class="string">        age int(2),</span></span><br><span class="line"><span class="string">        score float(3, 1)</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行创建表的sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    print(<span class="string">&quot;创建表成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;创建失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库插入数据"><a href="#操作Pymysql数据库插入数据" class="headerlink" title="操作Pymysql数据库插入数据"></a>操作Pymysql数据库插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据插入的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        insert into t_student(sname, age, score) values(%s, %s, %s)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行插入一条数据的sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;小明&quot;</span>, <span class="number">23</span>, <span class="number">98.2</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库插入多条数据"><a href="#操作Pymysql数据库插入多条数据" class="headerlink" title="操作Pymysql数据库插入多条数据"></a>操作Pymysql数据库插入多条数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据插入的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        insert into t_student(sname, age, score) values(%s, %s, %s)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">args = [(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="number">98.2</span>), (<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>, <span class="number">99.4</span>)] <span class="comment"># 定义变量接收插入数据，用列表括起来</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行插入多条数据的sql语句</span></span><br><span class="line">    cur.executemany(sql, args)</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;插入数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;插入数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库查询所有数据"><a href="#操作Pymysql数据库查询所有数据" class="headerlink" title="操作Pymysql数据库查询所有数据"></a>操作Pymysql数据库查询所有数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据查询的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;select * from t_student where age&gt;=22&quot;</span>   <span class="comment"># 查询年龄大于等于22的数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行查询数据的sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询结果</span></span><br><span class="line">    results = cur.fetchall()    <span class="comment"># 查询所有多条数据方法</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        sno = r[<span class="number">0</span>]</span><br><span class="line">        sname = r[<span class="number">1</span>]</span><br><span class="line">        age = r[<span class="number">2</span>]</span><br><span class="line">        score = r[<span class="number">3</span>]</span><br><span class="line">        print(<span class="string">&quot;sno:&quot;</span>, sno, <span class="string">&quot;sname:&quot;</span>, sname, <span class="string">&quot;age:&quot;</span>, age, <span class="string">&quot;score:&quot;</span>, score)</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库查询一条数据"><a href="#操作Pymysql数据库查询一条数据" class="headerlink" title="操作Pymysql数据库查询一条数据"></a>操作Pymysql数据库查询一条数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据查询的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;select * from t_student where age&gt;=22&quot;</span>   <span class="comment"># 查询年龄大于等于22的数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行查询数据的sql语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 获取查询结果</span></span><br><span class="line">    results = cur.fetchone()    <span class="comment"># 查询一条数据方法</span></span><br><span class="line">    print(<span class="string">&quot;sno:&quot;</span>, results[<span class="number">0</span>], <span class="string">&quot;sname:&quot;</span>, results[<span class="number">1</span>], <span class="string">&quot;age:&quot;</span>, results[<span class="number">2</span>], <span class="string">&quot;score:&quot;</span>, results[<span class="number">3</span>])</span><br><span class="line">    print(<span class="string">&quot;查询数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(<span class="string">&quot;查询数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库修改数据"><a href="#操作Pymysql数据库修改数据" class="headerlink" title="操作Pymysql数据库修改数据"></a>操作Pymysql数据库修改数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据修改的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;update t_student set sname=%s where sno=%s&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行修改数据的sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;五方&quot;</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;修改数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;修改数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h3 id="操作Pymysql数据库删除数据"><a href="#操作Pymysql数据库删除数据" class="headerlink" title="操作Pymysql数据库删除数据"></a>操作Pymysql数据库删除数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;QQ524900&quot;</span>, database=<span class="string">&quot;python_db&quot;</span>, port=<span class="number">3306</span>, charset = <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 编写数据删除的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;delete from t_student where sname=%s&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 执行删除数据的sql语句</span></span><br><span class="line">    cur.execute(sql, (<span class="string">&quot;五方&quot;</span>))</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    print(<span class="string">&quot;删除数据成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 事务回滚</span></span><br><span class="line">    con.rollback()</span><br><span class="line">    print(<span class="string">&quot;删除数据失败&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://www.orangecola.cn/categories/Python/"/>
    
    <category term="数据库" scheme="https://www.orangecola.cn/categories/Python/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Python" scheme="https://www.orangecola.cn/tags/Python/"/>
    
    <category term="Mysql" scheme="https://www.orangecola.cn/tags/Mysql/"/>
    
    <category term="SQLite3" scheme="https://www.orangecola.cn/tags/SQLite3/"/>
    
  </entry>
  
  <entry>
    <title>Python使用Matplotlib库</title>
    <link href="https://www.orangecola.cn/posts/f4309140/"/>
    <id>https://www.orangecola.cn/posts/f4309140/</id>
    <published>2021-10-02T13:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h2><p>Matplotlib是一个python的2D绘图库，通过它可以生成绘图，直方图，功率谱，条形图，错误图，散点图等。可以让数据可视化，使数据更加客观，具体。</p><p>安装matplotlib库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h2 id="基本绘制"><a href="#基本绘制" class="headerlink" title="基本绘制"></a>基本绘制</h2><p>使用matplotlib绘制图形使，画点和画线是最常用的两个场景。</p><p>pyplot基本方法</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210408160923468.png" alt="image-20210408160923468"></p><h3 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h3><p>1.导入模块pyplot，在模块pyplot中包含很多用于生产图表的函数。</p><p>2.将绘制的直线坐标传递给函数plot().</p><p>3.通过函数plt.show()打开Matplotlib查看器，显示绘制的图形。</p><p>例：根据两点绘制一条直线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备绘制的点</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 调用绘制方法</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="设置标签文字和线条粗细"><a href="#设置标签文字和线条粗细" class="headerlink" title="设置标签文字和线条粗细"></a>设置标签文字和线条粗细</h3><p>开发者可以设置线条的粗细，设置文字等。</p><p>例：绘制折线图并设置样式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备绘制的点x，y</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="comment"># 调用绘制方法绘制折线图</span></span><br><span class="line"><span class="comment"># linewidth属性设置线条宽度</span></span><br><span class="line">plt.plot(x, y, linewidth=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 添加x,y轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y=x^2&quot;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]    <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line"><span class="comment"># 给图表添加标题</span></span><br><span class="line">plt.title(<span class="string">&quot;多个点绘制折线图&quot;</span>)</span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>matplotlib默认不支持中文，可以使用方法来解决显示中文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>] </span><br></pre></td></tr></table></figure><h3 id="绘制一元二次方程的曲线y-x-2"><a href="#绘制一元二次方程的曲线y-x-2" class="headerlink" title="绘制一元二次方程的曲线y=x^2"></a>绘制一元二次方程的曲线y=x^2</h3><p>Matplotlib中plot函数用来绘制曲，需要将200个点的x坐标和y坐标分别以序列的形式传入plot函数，然后调用show函数显示绘制图形。</p><p>例：一元二次方程的曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备绘制的200个点x坐标</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">-100</span>, <span class="number">100</span>)</span><br><span class="line">y = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"><span class="comment"># 绘制一元二次方程</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 将图形保存图片</span></span><br><span class="line">plt.savefig(<span class="string">&quot;result&quot;</span>)   <span class="comment"># 默认的格式png，result是图片名</span></span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制正弦曲线和余弦曲线"><a href="#绘制正弦曲线和余弦曲线" class="headerlink" title="绘制正弦曲线和余弦曲线"></a>绘制正弦曲线和余弦曲线</h3><p>使用plt函数绘制任何曲线都是生成若干个坐标点(x,y)，理论上坐标点越多越好。本例取0到10之间100个等差数作为x的坐标，将这100个x坐标值一起传入Mumpy的sin和cos函数，就会得到100个y坐标值，然后可以使用plot函数绘制正弦曲线和余弦曲线。</p><p>例：绘制正弦曲线和余弦曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 等差数方法</span></span><br><span class="line"><span class="comment"># 绘制正弦曲线</span></span><br><span class="line">sin_y = np.sin(x)</span><br><span class="line">plt.plot(x, sin_y)</span><br><span class="line"><span class="comment"># 绘制余弦曲线</span></span><br><span class="line">cos_y = np.cos(x)</span><br><span class="line">plt.plot(x, cos_y)<span class="comment"># plot两次，两曲线绘画到同一个画布上</span></span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="将画布分区"><a href="#将画布分区" class="headerlink" title="将画布分区"></a>将画布分区</h3><p>如果想绘制到两张画布中，可以调用subplot()函数将画布分区。</p><p>例：将画布分为区域，将图画绘制到画布指定区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对画布进行分区，将画布分为2行2列，图像绘制到区1</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>修改x，y轴坐标大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlim(<span class="number">-5</span>, <span class="number">15</span>)<span class="comment"># 修改x轴坐标为-5~15</span></span><br><span class="line">plt.ylim(<span class="number">-2</span>, <span class="number">2</span>)<span class="comment"># 修改y轴坐标为-2~2</span></span><br></pre></td></tr></table></figure><h3 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h3><p>使用scatter函数可以绘制随机点，该函数需要接收x坐标和y坐标的序列。</p><p>例：sin函数的散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 等差数方法</span></span><br><span class="line"><span class="comment"># 生成散点图</span></span><br><span class="line">plt.scatter(x, np.sin(x))</span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用plot()也可以绘制散点图，最后加字符串o。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, sin_y, <span class="string">&quot;o&quot;</span>)<span class="comment"># o表示使用点状</span></span><br></pre></td></tr></table></figure><p>使用plot()绘制图形速度优于scatter()，所以如果画点没有形式差别，可以使用plot画，而如果画点有形式差别（如点的大小或颜色不同）则必须使用scatter()来画。</p><h4 id="绘制大小不同颜色不同的散点图"><a href="#绘制大小不同颜色不同的散点图" class="headerlink" title="绘制大小不同颜色不同的散点图"></a>绘制大小不同颜色不同的散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成10种大小，100种颜色的散点图</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)   <span class="comment"># 使执行多次每次获取的随机数都是一样的</span></span><br><span class="line">x = np.random.rand(<span class="number">100</span>)  <span class="comment"># 生成随机100个点</span></span><br><span class="line">y = np.random.rand(<span class="number">100</span>)</span><br><span class="line">size = np.random.rand(<span class="number">100</span>)*<span class="number">1000</span></span><br><span class="line"><span class="comment"># 生成随机颜色</span></span><br><span class="line">color = np.random.rand(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line"><span class="comment"># scatter中的s数要和x，y标量一样</span></span><br><span class="line">plt.scatter(x, y, s=size, c=color, alpha=<span class="number">0.7</span>)</span><br><span class="line"><span class="comment"># s表示点的大小，c表示点的颜色，alpha表示透明度</span></span><br><span class="line"><span class="comment"># 显示绘制图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>注意：点的个数和颜色的个数要相同；点的个数和点大小的个数可以不同，如果点的个数大于大小的个数，则超出点大小个数的会循环获取大小。</p><h3 id="绘制不同样式不同颜色的线条"><a href="#绘制不同样式不同颜色的线条" class="headerlink" title="绘制不同样式不同颜色的线条"></a>绘制不同样式不同颜色的线条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数的x</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">0</span>, <span class="string">&quot;--r&quot;</span>) <span class="comment"># --使样式为虚线，r为红色</span></span><br><span class="line">plt.plot(x, x+<span class="number">1</span>, <span class="string">&quot;-.b&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">2</span>, <span class="string">&quot;:g&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">3</span>, <span class="string">&quot;,k&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">4</span>, <span class="string">&quot;*c&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>增加图例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-10之间 100个等差数的x</span></span><br><span class="line">x =np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 使用legend()添加图例，给plot方法添加参数label</span></span><br><span class="line">plt.plot(x, x+<span class="number">0</span>, <span class="string">&quot;--r&quot;</span>, label=<span class="string">&quot;--r&quot;</span>) <span class="comment"># --使样式为虚线，r为红色</span></span><br><span class="line">plt.plot(x, x+<span class="number">1</span>, <span class="string">&quot;-.b&quot;</span>, label=<span class="string">&quot;-.b&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">2</span>, <span class="string">&quot;:g&quot;</span>, label=<span class="string">&quot;:g&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">3</span>, <span class="string">&quot;,k&quot;</span>, label=<span class="string">&quot;,k&quot;</span>)</span><br><span class="line">plt.plot(x, x+<span class="number">4</span>, <span class="string">&quot;*c&quot;</span>, label=<span class="string">&quot;*c&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>, fancybox=<span class="literal">True</span>, framealpha=<span class="number">0.8</span>, shadow=<span class="literal">True</span>, borderpad=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 图例默认位于左上角，可以通过loc进行修改</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>lengend参数：loc图例位置，fancybox边框，framealpha透明度，shadow阴影，borderpad边框宽度</li></ul><h3 id="绘制柱状图"><a href="#绘制柱状图" class="headerlink" title="绘制柱状图"></a>绘制柱状图</h3><p>可以使用bar函数绘制柱状图，柱状图需要水平的x坐标值，和每个x对应的y坐标值，形成柱状图。柱状图主要用来纵向对比和横向对比。</p><p>例：使用bar绘制柱状图，并设置柱的宽度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建x，y，x表示年份，y表示年份对应的数量</span></span><br><span class="line">x = [<span class="number">1990</span>, <span class="number">1995</span>, <span class="number">2000</span>, <span class="number">2005</span>]</span><br><span class="line">y = [<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>, <span class="number">4000</span>]</span><br><span class="line">x_label = [<span class="string">&quot;1990年&quot;</span>, <span class="string">&quot;1995年&quot;</span>, <span class="string">&quot;2000年&quot;</span>, <span class="string">&quot;2005年&quot;</span>]</span><br><span class="line"><span class="comment"># 调用bar()绘制柱状图</span></span><br><span class="line">plt.bar(x, y, width=<span class="number">3</span>)  <span class="comment"># 设置柱体宽度</span></span><br><span class="line"><span class="comment"># 修正中文乱码问题</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"><span class="comment"># 修改x坐标的显示值</span></span><br><span class="line">plt.xticks(x,x_label)</span><br><span class="line"><span class="comment"># 给x坐标，y坐标添加名称</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;年份&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;数量&quot;</span>)</span><br><span class="line"><span class="comment"># 给柱状图加标题</span></span><br><span class="line">plt.title(<span class="string">&quot;根据年份数量对比表&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>注意：bar函数的宽度不是像素宽度，bar函数会根据二维坐标系的尺寸，以及x坐标值的多少，自动确定每个柱的宽度，width指定的宽度就是这个标准柱宽度的倍数。该参数可以是浮点数或整数。</p><h4 id="bar绘制垂直方向柱状图和barh绘制水平方向柱状图"><a href="#bar绘制垂直方向柱状图和barh绘制水平方向柱状图" class="headerlink" title="bar绘制垂直方向柱状图和barh绘制水平方向柱状图"></a>bar绘制垂直方向柱状图和barh绘制水平方向柱状图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x，y</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.random.randint(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">#将画布分为一行两列，第一区bar画</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.bar(x, y, color=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"><span class="comment"># 在0的位置水平方向添加颜色分界线条</span></span><br><span class="line">plt.axhline(<span class="number">0</span>, color=<span class="string">&quot;blue&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个区barh画</span></span><br><span class="line"><span class="comment"># barh 将y和x进行了对换，竖着方向为x轴</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.barh(x, y, color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="comment"># 在0的位置垂直方向添加颜色分界线条</span></span><br><span class="line">plt.axvline(<span class="number">0</span>, color=<span class="string">&quot;red&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="柱状图正负数值设置不同颜色柱"><a href="#柱状图正负数值设置不同颜色柱" class="headerlink" title="柱状图正负数值设置不同颜色柱"></a>柱状图正负数值设置不同颜色柱</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x，y</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.random.randint(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">#将画布分为一行两列，第一区bar画</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">v_bar = plt.bar(x, y, color=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bar, height <span class="keyword">in</span> <span class="built_in">zip</span>(v_bar, y):   <span class="comment"># zip()使括号内两个属性对应起来</span></span><br><span class="line">    <span class="keyword">if</span> height &gt; <span class="number">0</span>:</span><br><span class="line">        bar.<span class="built_in">set</span>(color=<span class="string">&quot;green&quot;</span>)  <span class="comment"># set()设置bar属性</span></span><br><span class="line"><span class="comment"># 在0的位置水平方向添加颜色分界线条</span></span><br><span class="line">plt.axhline(<span class="number">0</span>, color=<span class="string">&quot;blue&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="柱状图使用实例"><a href="#柱状图使用实例" class="headerlink" title="柱状图使用实例"></a>柱状图使用实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">real_names = [<span class="string">&quot;我的姐姐&quot;</span>, <span class="string">&quot;哥斯拉大战金刚&quot;</span>, <span class="string">&quot;第十一回&quot;</span>]</span><br><span class="line"><span class="comment"># 3天内票房数</span></span><br><span class="line">real_num1 = [<span class="number">2947</span>, <span class="number">1562</span>, <span class="number">189</span>]</span><br><span class="line">real_num2 = [<span class="number">2150</span>, <span class="number">1140</span>, <span class="number">225</span>]</span><br><span class="line">real_num3 = [<span class="number">2602</span>, <span class="number">1290</span>, <span class="number">243</span>]</span><br><span class="line">x = np.arange(<span class="built_in">len</span>(real_names))</span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line">width = <span class="number">0.3</span></span><br><span class="line">plt.bar(x, real_num1, alpha=<span class="number">0.5</span>, width=width, label=real_names[<span class="number">0</span>])</span><br><span class="line">plt.bar([i+width <span class="keyword">for</span> i <span class="keyword">in</span> x], real_num2, alpha=<span class="number">0.5</span>, width=width, label=real_names[<span class="number">1</span>])</span><br><span class="line">plt.bar([i+width*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x], real_num3, alpha=<span class="number">0.5</span>, width=width, label=real_names[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 设置x坐标显示值</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>]=[<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line">x_label = [<span class="string">&quot;第&#123;&#125;天&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">plt.xticks([i+width <span class="keyword">for</span> i <span class="keyword">in</span> x], x_label)</span><br><span class="line"><span class="comment"># 给y坐标添加名称</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;票房数&quot;</span>)</span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper right&quot;</span>, fancybox=<span class="literal">True</span>, framealpha=<span class="number">0.8</span>, shadow=<span class="literal">True</span>, borderpad=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制饼状图"><a href="#绘制饼状图" class="headerlink" title="绘制饼状图"></a>绘制饼状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">man = <span class="number">1733</span></span><br><span class="line">woman = <span class="number">1566</span></span><br><span class="line">man_perc = man/(woman+man)</span><br><span class="line">woman_perc = woman/(woman+man)</span><br><span class="line"><span class="comment"># 解决中文乱码，正常显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>]=[<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"><span class="comment"># 添加名称</span></span><br><span class="line">labels = [<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>]</span><br><span class="line"><span class="comment"># 添加颜色</span></span><br><span class="line">colors = [<span class="string">&quot;blue&quot;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line"><span class="comment"># 绘制饼状图</span></span><br><span class="line">paches, texts, autotexts = plt.pie([man_perc, woman_perc], labels=labels, colors=colors, explode=(<span class="number">0</span>, <span class="number">0.03</span>), autopct=<span class="string">&quot;%0.2f%%&quot;</span>)</span><br><span class="line"><span class="comment"># 数据要用序列括起来,labels名称，explode分割饼状图,autopct显示百分比</span></span><br><span class="line"><span class="comment"># 设置饼状图中百分比字体颜色</span></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> autotexts:</span><br><span class="line">    text.set_color(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="comment"># 设置名称字体颜色</span></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br><span class="line">    text.set_color(<span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="comment"># 设置字体大小</span></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts+autotexts:</span><br><span class="line">    text.set_fontsize(<span class="number">16</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h3><p>直方图与柱状图的分格类似，都是由若干个柱组成，但直方图和柱状图的含义不同，直方图使用来观察分布状态的，而柱状图是用来查看每个x坐标对应的y坐标值的。直方图关注的是分布，不关心具体的值，而柱状图关心的是具体的某个值。</p><p>例：使用randn函数生成1000个正太分布的随机数，使用hist函数绘制这1000个随机数的分布状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 频次直方图，均匀分布,正态分布</span></span><br><span class="line"><span class="comment"># 生成1000个标准的正态分布随机数</span></span><br><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># hist生成直方图，bins修改柱的宽度</span></span><br><span class="line">plt.hist(x, bins=<span class="number">100</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用narmal()也可以生成正态分布直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用np.random.normal()指定期望和均值的正态分布</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>, <span class="number">0.8</span>, <span class="number">1000</span>)  <span class="comment"># (期望，均值，个数）</span></span><br><span class="line">y = np.random.normal(<span class="number">-2</span>, <span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">z = np.random.normal(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1000</span>)</span><br><span class="line">kwargs=<span class="built_in">dict</span>(bins=<span class="number">100</span>, alpha=<span class="number">0.5</span>)    <span class="comment"># bins设置柱体宽度，alpha设置透明度(0-1)</span></span><br><span class="line">plt.hist(x, **kwargs)</span><br><span class="line">plt.hist(y, **kwargs)</span><br><span class="line">plt.hist(z, **kwargs)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制等高线图"><a href="#绘制等高线图" class="headerlink" title="绘制等高线图"></a>绘制等高线图</h3><p>例：使用pylot绘制等高线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建x，y</span></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)   <span class="comment"># 生成等差数</span></span><br><span class="line">y = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 计算x,y相交的点(x,y)</span></span><br><span class="line">X, Y = np.meshgrid(x, y)    <span class="comment"># meshgrid生成相交点</span></span><br><span class="line"><span class="comment"># 计算Z的坐标</span></span><br><span class="line">Z = np.sqrt(X**<span class="number">2</span>+Y**<span class="number">2</span>)</span><br><span class="line">plt.contour(X, Y, Z)    <span class="comment"># 绘制线条的等高线图</span></span><br><span class="line">plt.contourf(X,Y, Z)    <span class="comment"># 绘制填充的等高线图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="绘制三维图像"><a href="#绘制三维图像" class="headerlink" title="绘制三维图像"></a>绘制三维图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 导入3D包</span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建X,Y,Z</span></span><br><span class="line">X = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">Y = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">Z = [<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">fig = plt.figure()  <span class="comment"># 返回fig对象</span></span><br><span class="line"><span class="comment"># 创建Axes3D对象</span></span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">ax.plot_trisurf(X, Y, Z)    <span class="comment"># 输入坐标</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://www.orangecola.cn/categories/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.orangecola.cn/categories/Python/Matplotlib/"/>
    
    
    <category term="Python" scheme="https://www.orangecola.cn/tags/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.orangecola.cn/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>网络通信基础</title>
    <link href="https://www.orangecola.cn/posts/5888fee2/"/>
    <id>https://www.orangecola.cn/posts/5888fee2/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>私有IP：本地局域网上的IP，专门为组织机构内部使用</p><ul><li><p>10.0.0.0～10.255.255.255</p></li><li><p>172.16.0.0～172.31.255.255 </p></li><li><p>192.168.0.0～192.168.255.255 </p></li><li><p>公有IP：全球访问</p></li></ul><p>IP地址127． 0． 0． 1~127． 255． 255． 255⽤于回路测试</p><p>⼦⽹掩码：区分网络号和主机号</p><p>端口号： 用来标记区分进程</p><h2 id="网络基础-协议"><a href="#网络基础-协议" class="headerlink" title="网络基础-协议"></a>网络基础-协议</h2><p>根据TCP/IP协议簇功能的不同，将它分为了几种层次：</p><p>四层：</p><ul><li><p>网络接口层（链路层）</p></li><li><p>网络层</p></li><li><p>传输层</p></li><li><p>应用层</p></li></ul><p>七层：</p><ul><li><p>物理层</p></li><li><p>数据链路层</p></li><li><p>网络层</p></li><li><p>传输层</p></li><li><p>会话层</p></li><li><p>表示层</p></li><li><p>应用层</p></li></ul><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424151125242.png" alt="image-20210424151125242"></p><h2 id="Socket编程-简介"><a href="#Socket编程-简介" class="headerlink" title="Socket编程-简介"></a>Socket编程-简介</h2><p>socket：通过网络完成进程间通信的方式。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424151206303.png" alt="image-20210424151206303"></p><p>Socket本质是编程接口(API)： Socket 是对 TCP/IP 协议的封装。</p><p>套接字之间的连接过程可以分为三个步骤：服务器监听，客户端请求，连接确认。</p><h3 id="Socket编程-创建Socket"><a href="#Socket编程-创建Socket" class="headerlink" title="Socket编程-创建Socket"></a>Socket编程-创建Socket</h3><p>•创建Socket：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#导入套接字模块</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment">#s此时是一个socket对象，拥有发送和接收网络数据的功能</span></span><br></pre></td></tr></table></figure><p>该函数带有两个参数（参数必须写）</p><ul><li><p>AF_INET：ipv4协议⽤于 Internet 进程间通信</p></li><li><p>套接字类型， 可以是 SOCK_STREAM（流式套接字， ⽤于<br> TCP 协议） 或者 SOCK_DGRAM（数据报套接字， ⽤于 UDP 协<br> 议） </p><ul><li><p>TCP慢但是稳定不会丢数据</p></li><li><p>UDP快但是可能会丢数据（黑客攻击）</p></li></ul></li><li><p>确定了IP地址端口号（ipv4协议），TCP或UDP协议之后，计算机之间可以进行通信</p></li></ul><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>软件开发基本都需网络通信，应用程序接收发送信息。</p><p>使用操作系统提供的socket 编程接口来发送和接收信息，进行网络通信。</p><p>发送信息的应用程序，通过 <code>socket 编程接口</code> 把信息给操作系统的TCP/IP协议栈通讯模块；</p><p>通讯模块一层层传递给 其他通讯模块（网卡驱动等），最后再通过网卡等硬件设备发送到网络上去；</p><p>经过 网络上路由器的一次次转发，最终到了 目的程序 所在的 计算机（或者手机等设备） ， 再通过 其 操作系统的 TCP/IP协议栈通讯模块 一层层上传。</p><p>最后接收信息的程序，通过 <code>socket 编程接口</code> 接收到了 传输的信息。</p><p>这个过程可以用下图来表示</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/socket1.png"></p><h2 id="socket-库"><a href="#socket-库" class="headerlink" title="socket 库"></a>socket 库</h2><p>要进行socket编程，发送网络消息，我们可以使用 Python 内置的 socket 库 。</p><p>目前的socket编程，使用的最多的就是通过tcp协议进行网络通讯的。</p><p>tcp进行通讯的程序双方，分为服务端和客户端。</p><p>tcp 协议进行通讯的双方，是需要先建立一个虚拟连接的。然后双方程序才能发送业务数据信息。</p><p>建立tcp虚拟连接是通过著名的 <code>三次握手</code> 进行的。</p><p>我们现在来看一个 tcp协议进行通讯的 socket 服务端程序和客户端程序。</p><p>tcp 服务端程序 server.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  === TCP 服务端程序 server.py ===</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket 库</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机地址为空字符串，表示绑定本机所有网络接口ip地址</span></span><br><span class="line"><span class="comment"># 等待客户端来连接</span></span><br><span class="line">IP = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">PORT = <span class="number">50000</span></span><br><span class="line"><span class="comment"># 定义一次从socket缓冲区最多读入512个字节数据</span></span><br><span class="line">BUFLEN = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个socket对象</span></span><br><span class="line"><span class="comment"># 参数 AF_INET 表示该socket网络层使用IP协议</span></span><br><span class="line"><span class="comment"># 参数 SOCK_STREAM 表示该socket传输层使用tcp协议</span></span><br><span class="line">listenSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket绑定地址和端口</span></span><br><span class="line">listenSocket.bind((IP, PORT))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使socket处于监听状态，等待客户端的连接请求</span></span><br><span class="line"><span class="comment"># 参数 8 表示 最多接受多少个等待连接的客户端</span></span><br><span class="line">listenSocket.listen(<span class="number">8</span>)</span><br><span class="line">print(<span class="string">f&#x27;服务端启动成功，在<span class="subst">&#123;PORT&#125;</span>端口等待客户端连接...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dataSocket, addr = listenSocket.accept()</span><br><span class="line">print(<span class="string">&#x27;接受一个客户端连接:&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 尝试读取对方发送的消息</span></span><br><span class="line">    <span class="comment"># BUFLEN 指定从接收缓冲里最多读取多少字节</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="comment"># 退出循环，结束消息收发</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取的字节数据是bytes类型，需要解码为字符串</span></span><br><span class="line">    info = recved.decode()</span><br><span class="line">    print(<span class="string">f&#x27;收到对方信息： <span class="subst">&#123;info&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的数据类型必须是bytes，所以要编码</span></span><br><span class="line">    dataSocket.send(<span class="string">f&#x27;服务端接收到了信息 <span class="subst">&#123;info&#125;</span>&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端也调用close()关闭socket</span></span><br><span class="line">dataSocket.close()</span><br><span class="line">listenSocket.close()</span><br></pre></td></tr></table></figure><p>tcp 客户端程序 client.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  === TCP 客户端程序 client.py ===</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">IP = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">SERVER_PORT = <span class="number">50000</span></span><br><span class="line">BUFLEN = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个socket对象，指明协议</span></span><br><span class="line">dataSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务端socket</span></span><br><span class="line">dataSocket.connect((IP, SERVER_PORT))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 从终端读入用户输入的字符串</span></span><br><span class="line">    toSend = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>  toSend ==<span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发送消息，也要编码为 bytes</span></span><br><span class="line">    dataSocket.send(toSend.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待接收服务端的消息</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 打印读取的信息</span></span><br><span class="line">    print(recved.decode())</span><br><span class="line"></span><br><span class="line">dataSocket.close()</span><br></pre></td></tr></table></figure><p><strong>UDP ：User Data Protocol，用户数据报协议</strong></p><p><strong>TCP：Transmission Control Protocol，传输控制协议</strong></p><h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><p>Trivial File Transfer Protocol,简单⽂件传输协议），使用这个协议，就可以实现简单文件的下载，tftp端⼝号为69。</p><p>实现TFTP下载器：</p><ul><li><p>下载：从服务器上将一个文件复制到本机上</p></li><li><p>下载的过程：</p><ul><li>在本地创建一个空文件（与要下载的文件同名）</li><li>向里面写数据（接收到一点就向空文件里写一点）</li><li>关闭（接受完所有数据关闭文件）</li></ul></li></ul><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424214121560.png" alt="image-20210424214121560"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210424214133777.png" alt="image-20210424214133777"></p><p>当客户端接收到的数据⼩于516（2字节操作码+2个字节的序号+512字节数据） 时， 就意味着服务器发送完毕了 （如果恰好最后一次数据长度为516，会再发一个长度为0的数据包）。</p><h3 id="struct模块使用"><a href="#struct模块使用" class="headerlink" title="struct模块使用"></a>struct模块使用</h3><ul><li><p>构造下载请求数据：“1test.jpg0octet0”</p></li><li><pre><code class="python">import structcmb_buf = struct.pack(“!H8sb5sb”,1,b“test.jpg”,0,b“octet”,0)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> 如何保证操作码（1&#x2F;2&#x2F;3&#x2F;4&#x2F;5）占两个字节？如何保证0占一个字节？</span><br><span class="line"></span><br><span class="line">- !H8sb5sb: ! 表示按照网络传输数据要求的形式来组织数据（占位的格式）</span><br><span class="line">   H 表示将后面的 1 替换成占两个字节</span><br><span class="line">     8s 相当于8个s（ssssssss）占8个字节</span><br><span class="line">      b 占一个字节</span><br><span class="line"></span><br><span class="line">struct模块可以按照指定格式将Python数据转换为字符串,该字符串为字节流</span><br><span class="line"></span><br><span class="line">struct模块中最重要的三个函数是pack(), unpack(), calcsize()</span><br><span class="line"></span><br><span class="line">按照给定的格式(fmt)，把数据封装成字符串(实际上是类似于c结构体的字节流)</span><br><span class="line"></span><br><span class="line">- pack(fmt, v1, v2, ...)  </span><br><span class="line"></span><br><span class="line">按照给定的格式(fmt)解析字节流string，返回解析出来的元组</span><br><span class="line"></span><br><span class="line">- unpack(fmt, string) </span><br><span class="line"></span><br><span class="line">计算给定的格式(fmt)占用多少字节的内存</span><br><span class="line"></span><br><span class="line">- calcsize(fmt)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">struct.pack(&quot;!HH&quot;,4,p_num)</span><br><span class="line"># </span><br><span class="line">cmdTuple &#x3D; struct.unpack(&quot;!HH&quot;, recvData[:4])</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP：传输控制协议。</p><p>TCP通信模型： 在通信之前，必须先等待建立链接。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210425214049971.png" alt="image-20210425214049971"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络通信" scheme="https://www.orangecola.cn/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    <category term="IP" scheme="https://www.orangecola.cn/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/IP/"/>
    
    
    <category term="网络通信" scheme="https://www.orangecola.cn/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    <category term="IP" scheme="https://www.orangecola.cn/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>Hexo快速搭建属于自己的博客</title>
    <link href="https://www.orangecola.cn/posts/e7d5b071/"/>
    <id>https://www.orangecola.cn/posts/e7d5b071/</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>Hexo 会解析 <code>markdown</code> 语法 生成对应的 html ，主题就是 css 样式。</p><p>本次使用的是Hexo+Butterfly主题搭建博客，所有安装建议安装最新稳定版本。</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li><p>安装Git</p><p>Git下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>下载太慢可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></li><li><p>安装Node.js</p><p>官网下载链接：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>同样太慢可以前往可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载安装包。</p></li><li><p>更换镜像源</p><p>为了解决速度慢的问题。建议换一个Node.js镜像源，这里更换为淘宝的镜像源，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装Hexo</p><p>官网链接：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>直接复制首页代码粘贴运行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><h2 id="快速生成静态博客"><a href="#快速生成静态博客" class="headerlink" title="快速生成静态博客"></a>快速生成静态博客</h2><ol><li><p>初始化</p><p>在本地找个位置创建一个文件夹，作为博客部署的空间。后续所以改动和添加都基于这个文件夹操作，在此文件夹内初始化hexo，选择该文件夹右键选择Git bash打开，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>Hexo 将会在文件夹中自动生成所需要的文件，初始化完成。</p><p>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li><li><p>启动本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动成功后，通过本地默认的4000端口访问：<a href="http://localhost:4000/">http://localhost:4000</a></p></li><li><p>生成第一篇博文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;第一篇文章&quot;</span><br></pre></td></tr></table></figure><p>此命令会在博客目录下的source/_posts目录下，生成一个Markdown格式的md结尾文件，文件名为“第一篇文章”，在此文件内使用Markdown语法就可以编写文章了。</p></li><li><p>hexo生成博客一键三连</p><p>每次修改完博客目录内部文件后，都需要重新生成一下，修改了博客配置文件需要清理缓存重新生成。只修改增加博文的也可以仅重新生成即可。</p><ol><li><p>清理缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>生成静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>本地预览（不需预览可跳过）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>   基本一个简单的博客就在本地搭建出来了，接下来就是将博客部署到可以网络上访问。</p><hr><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><ol><li><p>打开自己的Github仓库，新建放置博客的仓库(repository)。</p><p><strong>仓库命名格式为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你的Github账号名.github.io(例如：Orangecola.github.io)</span><br></pre></td></tr></table></figure><p>仓库要选择公开(Public)</p></li><li><p>安装hexo-git部署的插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml文件</p><p>打开博客目录中的_config.yml文件，最底部有一个# Deployment模块，在这个模块下配置git部署信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Orangecolaa/Orangecolaa.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># [,branch]为可选项，表示部署的分支</span></span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure><p>repo放置你的博客仓库URL，通过这个地址部署到你的博客仓库中。</p></li><li><p>部署到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>稍微等一下接下来就可以访问你的博客了，通过访问 你的Github账号名.github.io来访问。</p></li></ol><hr><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>Hexo有许多大神制作的主题，可以自由挑选更换。</p><p>Hexo主题官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><ol><li><p>下载主题</p><p>可以点进主题Github仓库复制url进行git clone下载，这里以下Butterfly为例，在博客目录下git bash输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>接下来在themes目录下会出现butterfly的主题文件夹。</p></li><li><p>修改博客目录的_config.yml文件</p><p>找到# Extensions模块下的theme标签（默认为landscape），将其替换为下载好的主题名称butterfly。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>接下来再重新清理缓存、部署、启动本地服务、推到远端，一套步骤下来博客+主题就搭建好了。</p></li></ol><hr><h1 id="后续美化"><a href="#后续美化" class="headerlink" title="后续美化"></a>后续美化</h1><p>后续关于主题界面美化增加功能插件等丰富性教程可以自行查看进行个性化修改。</p><p>butterfly官方文档：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo博客" scheme="https://www.orangecola.cn/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://www.orangecola.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何将项目上传到Github</title>
    <link href="https://www.orangecola.cn/posts/7bcbd7d7/"/>
    <id>https://www.orangecola.cn/posts/7bcbd7d7/</id>
    <published>2021-09-02T20:45:00.000Z</published>
    <updated>2021-10-16T03:21:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github作为一个开源社区，上面有很多优秀的开源代码，但是对于小白来说，只是fork别人的代码很简单，但是当要将自己的项目上传到Github时或许不知道怎么上传。接下来就是超级小白教程了，详细介绍如何将项目上传到自己的Github上。</p><h2 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h2><p>（1）要上传那肯定得有一个Github账号，所以没有的同学先去申请一个吧。</p><p>访问：<a href="https://github.com/">https://github.com/</a> 进行注册</p><p>注册界面：</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624215847427.png" alt="image-20210624215847427"></p><p>注册完成就可以继续啦。</p><p>（2）这里使用Git上传，所以我们还要安装Git工具，点击下面的下载地址下载，下载后直接一路默认安装就可以了。</p><p>下载：<a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a></p><p>下载界面：点击Download</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624220245747.png" alt="image-20210624220245747"></p><p>准备工作做完就可以开始了。</p><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h2><p>（1）进入Github首页，点击New repository新建一个项目</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624224152769.png" alt="image-20210624224152769"></p><p>（2）填写相应信息后点击create即可</p><table><thead><tr><th>对应名称</th><th>说明</th></tr></thead><tbody><tr><td>Repository name</td><td>仓库名称</td></tr><tr><td>Description(可选)</td><td>仓库描述介绍</td></tr><tr><td>Public, Private</td><td>仓库权限（公开共享，私有或指定合作者）</td></tr><tr><td>Initialize this repository with a README</td><td>添加一个README.md</td></tr><tr><td>gitignore</td><td>不需要进行版本管理的仓库类型，对应生成文件.gitignore</td></tr><tr><td>license</td><td>证书类型，对应生成文件LICENSE</td></tr></tbody></table><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624233647546.png" alt="image-20210624233647546"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624233736543.png" alt="image-20210624233736543"></p><p>（3）点击 Code 会出现一个地址，copy这个地址备用。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624234432662.png" alt="image-20210624234432662"></p><p>（4）接下来就是在你本地项目文件夹操作，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here 和 Git Bash Here，这里我们选择Git Bash Here，进入如下界面，Test即为我的项目名。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624235054700.png" alt="image-20210624235054700"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210624235446189.png" alt="image-20210624235446189"></p><p>（5）接下来在命令行输入如下代码（关键步骤），把Github上面的仓库克隆到本地。</p><p>将<a href="https://xxxxx.git/">https://xxxxx.git</a> 替换成你自己copy的那个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Orangecolaa&#x2F;Test.git</span><br></pre></td></tr></table></figure><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625001348125.png" alt="image-20210625001348125"></p><p>（6）操作完这个步骤之后，你的本地项目文件夹下就会多出个文件夹，该文件夹名为你在Github上面创建的项目名，比如我这里多出了个Test文件夹，我们把本地项目文件夹下的所有要上传的文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625001933293.png" alt="image-20210625001933293"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625001959494.png" alt="image-20210625001959494"></p><p>（7）下一步接着继续在Git窗口中输入命令：cd Test，进入Test文件夹中。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625002115876.png" alt="image-20210625002115876"></p><p>（8）下一步依次输入以下代码即可完成其他剩余操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p><strong>注：</strong>别忘记后面的 .  此操作是把Test文件夹下面的文件都添加进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit  -m  &quot;注释&quot;  </span><br></pre></td></tr></table></figure><p><strong>注：</strong>“注释” 里面换成你要说明的，如“first commit”</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625003458450.png" alt="image-20210625003458450"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><strong>注：</strong>此操作目的是把本地仓库push到Github上面</p><p><strong>注意：</strong>由于Github上传代码的默认分支由master变为main了，所以在这里还是使用以前master，可能会遇到这个问题</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210625004425650.png" alt="image-20210625004425650"></p><p>提示 error: failed to push some refs to ‘<a href="https://github.com/xxxxx/xxx.git&#39;">https://github.com/xxxxx/xxx.git&#39;</a></p><p><strong>解决办法</strong>：将master改为main</p><p>（9）接下来有可能如果你没代理可能还是上传不成功，会遇到下面这个问题。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210626162404022.png" alt="image-20210626162404022"></p><p><strong>错误描述：</strong>OpenSSL SSL_connect: Connection was reset in connection to github.com:443<br>看错误描述就标识ssl连接不到443端口，说明是代理出了问题。</p><p><strong>解决办法：</strong>本机挂代理，先检查git的全局配置，然后设置Git全局代理</p><p><strong>查看全局配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210626163151920.png" alt="image-20210626163151920"></p><p><strong>设置全局代理：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>示例7890端口是代理软件端口，按个人情况修改。</p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/image-20210626163325625.png" alt="image-20210626163325625"></p><p>接下来重新输入git push -u origin main 就可以成功了，上你自己的Github看看你创建的库就能看到自己上传的代码了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Github" scheme="https://www.orangecola.cn/categories/Github/"/>
    
    
    <category term="Github" scheme="https://www.orangecola.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Django初步</title>
    <link href="https://www.orangecola.cn/posts/6fd05540/"/>
    <id>https://www.orangecola.cn/posts/6fd05540/</id>
    <published>2021-09-01T20:20:00.000Z</published>
    <updated>2021-10-16T03:21:45.688Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Web框架中的一些概念"><a href="#Web框架中的一些概念" class="headerlink" title="Web框架中的一些概念"></a>Web框架中的一些概念</h2><ul><li>MVC<ul><li>大部分开发语言中都有MVC框架</li><li>MVC框架的核心思想是：解耦</li><li>降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现代码的重用</li><li>m表示model，主要用于对数据库层的封装</li><li>v表示view，用于向用户展示结果</li><li>c表示controller，是核心，用于处理请求、获取数据、返回结果</li></ul></li><li>MVT<ul><li>Django是一款python的web开发框架</li><li>与MVC有所不同，属于MVT框架</li><li>m表示model，负责与数据库交互</li><li>v表示view，是核心，负责接收请求、获取数据、返回结果</li><li>t表示template，负责呈现内容到浏览器</li></ul></li></ul><h2 id="Django框架介绍"><a href="#Django框架介绍" class="headerlink" title="Django框架介绍"></a>Django框架介绍</h2><ul><li>Django是一个高级的Python Web框架，它鼓励快速开发和清洁，务实的设计。</li><li>由经验丰富的开发人员构建，它负责Web开发的许多麻烦，因此您可以专注于编写应用程序，而无需重新创建轮子。</li><li>它是免费的和开源的。</li><li>被官方称之为完美主义者的Web框架。</li><li>Django可以更快地构建更好的Web应用程序并减少代码。</li></ul><h3 id="Django框架的特点"><a href="#Django框架的特点" class="headerlink" title="Django框架的特点"></a>Django框架的特点</h3><ul><li>快速开发：Django的宗旨在于帮助开发人员快速从概念到完成应用程序。</li><li>安全可靠：Django认真对待安全性，帮助开发人员避免许多常见的安全错误。</li><li>超可伸缩性：Web上的一些最繁忙的网站利用了Django快速灵活扩展的能力。</li></ul><h3 id="Django可以使用什么Python版本？"><a href="#Django可以使用什么Python版本？" class="headerlink" title="Django可以使用什么Python版本？"></a>Django可以使用什么Python版本？</h3><table><thead><tr><th align="left">Django版本</th><th align="left">Python版本</th></tr></thead><tbody><tr><td align="left">2.2</td><td align="left">3.5、3.6、3.7、3.8（在2.2.8中添加）</td></tr><tr><td align="left">3.0、3.1、3.2</td><td align="left">3.6、3.7、3.8</td></tr></tbody></table><ul><li>Django的开发版本</li></ul><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/release-roadmap.e844db08610e.png" alt="img"></p><p><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/22.png" alt="img"></p><h2 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h2><ul><li>作为Python Web框架，Django需要Python，在安装Python同时需要安装pip。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认安装最新版</span></span><br><span class="line">pip install django</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以指定版本</span></span><br><span class="line">pip install django==3.2.*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测当前是否安装Django及版本</span></span><br><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><h2 id="Django的快速入门体验"><a href="#Django的快速入门体验" class="headerlink" title="Django的快速入门体验"></a>Django的快速入门体验</h2><h3 id="Django项目创建和运行"><a href="#Django项目创建和运行" class="headerlink" title="Django项目创建和运行"></a>Django项目创建和运行</h3><p>如果这是你第一次使用Django，那么你必须要照顾一些初始设置。也就是说，您需要自动生成一些建立Django 项目的代码</p><p>从命令行cd到您要存储代码的目录，然后运行以下命令.</p><h4 id="1-创建项目："><a href="#1-创建项目：" class="headerlink" title="(1)创建项目："></a>(1)创建项目：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajango-admin startproject myweb</span><br></pre></td></tr></table></figure><p>我们来看看startproject创建的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost myweb]# tree</span><br><span class="line">.</span><br><span class="line">├── manage.py</span><br><span class="line">└── myweb</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><p><strong>关于上面自动生成的目录与文件解释如下：</strong></p><ul><li>外部myweb/根目录只是一个项目的容器。它的名字与Django无关; 您可以将其重命名为您喜欢的任何内容。</li><li>manage.py：一个命令行实用程序，可以让您以各种方式与此Django项目进行交互。你可以阅读所有的细节 manage.py在Django的管理和manage.py。</li><li>内部mysite/目录是您的项目的实际Python包。它的名字是您需要用来导入其中的任何内容的Python包名称（例如mysite.urls）。</li><li>mysite/<strong>init</strong>.py：一个空的文件，告诉Python这个目录应该被认为是一个Python包。</li><li>mysite/settings.py：此Django项目的设置/配置。 Django设置会告诉你所有关于设置的工作原理。</li><li>mysite/urls.py：该Django项目的URL声明; 您的Django动力网站的“目录”。</li><li>mysite/wsgi.py：WSGI兼容的Web服务器为您的项目提供服务的入口点。</li></ul><h4 id="2-运行开发服务器："><a href="#2-运行开发服务器：" class="headerlink" title="(2)运行开发服务器："></a>(2)运行开发服务器：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程访问</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8000/%E6%97%A2%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5%E3%80%82">http://127.0.0.1:8000/既可以查看测试网页。</a></p><p>默认情况下，该runserver命令在端口8000的内部IP上启动开发服务器。当然也可以指定端口开启服务,如8080端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure><h4 id="3-创建一个应用程序："><a href="#3-创建一个应用程序：" class="headerlink" title="(3)创建一个应用程序："></a>(3)创建一个应用程序：</h4><p>Django自带一个实用程序，可以自动生成应用程序的基本目录结构，因此您可以专注于编写代码而不是创建目录。</p><p>要创建您的应用程序，请确保您与目录位于同一目录，manage.py 并键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure><p>这将创建一个目录myapp，其目录如下：此目录结构将容纳轮询应用程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost demo]# tree myweb/</span><br><span class="line">myweb/</span><br><span class="line">├── manage.py</span><br><span class="line">├── myweb</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── myapp</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure><h3 id="Django的视图和函数"><a href="#Django的视图和函数" class="headerlink" title="Django的视图和函数"></a>Django的视图和函数</h3><h4 id="定义我们的第一个视图"><a href="#定义我们的第一个视图" class="headerlink" title="定义我们的第一个视图"></a>定义我们的第一个视图</h4><p>我们来写第一个视图。打开文件myapp/views.py 并放入以下Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world.&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是Django中最简单的视图。要调用视图，我们需要将其映射到一个URL。为此，我们需要一个URLconf。</p><p>要在myapp目录中创建一个URLconf，创建一个名为urls.py。</p><p><strong>在myapp/urls.py文件中包含以下代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下一步是将根URLconf指向myapp.urls模块。 在 myweb/urls.py添加一条import用于django.urls.include和插入include()的urlpatterns列表，<strong>所以你必须打开myweb下的urls写入子urls文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include,path <span class="comment"># 新增</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    path(<span class="string">&#x27;myweb/&#x27;</span>, include(<span class="string">&#x27;myapp.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中include()函数允许引用其他URLconfs。请注意，该include()函数的正则表达式 没有$（字符串匹配字符），而是尾部的斜杠。 每当Django遇到时 include()，它会排除与该点匹配的任何部分，并将剩余的字符串发送到随附的URLconf进行进一步处理。</p><p>您现在已将index视图连接到URLconf中。</p><p><strong>重新运行或刷新页面验证它的工作：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中转到http:// localhost：8000 / myweb /，您应该看到页面出现文本：”Hello, world. “</p><h4 id="path-方法"><a href="#path-方法" class="headerlink" title="path()方法"></a>path()方法</h4><p>一个路由配置模块就是一个urlpatterns列表，列表的每个元素都是一项path，每一项path都是以path()的形式存在。</p><p>path()方法可以接收4个参数，其中前2个是必须的：<code>route</code>和<code>view</code>，以及2个可选的参数：<code>kwargs</code>和<code>name</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(route, view, name, kwargs)</span><br></pre></td></tr></table></figure><ul><li><p>route</p><p>route 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 urlpatterns 的第一项path开始，按顺序依次匹配列表中的项，直到找到匹配的项，然后执行该条目映射的视图函数或下级路由，其后的条目将不再继续匹配。因此，url路由执行的是短路机制，path的编写顺序非常重要！</p></li><li><p>view</p><p>view指的是处理当前url请求的视图函数。当Django匹配到某个路由条目时，自动将封装的<code>HttpRequest</code>对象作为第一个参数，被“捕获”的参数以关键字参数的形式，传递给该条目指定的视图view。</p></li><li><p>name</p><p>对你的URL进行命名，让你能够在Django的任意处，尤其是模板内显式地引用它。这是一个非常强大的功能，相当于给URL取了个全局变量名，不会将url匹配地址写死。</p></li><li><p>kwargs</p><p>任意数量的关键字参数可以作为一个字典传递给目标视图。</p></li></ul><h3 id="项目的模型"><a href="#项目的模型" class="headerlink" title="项目的模型"></a>项目的模型</h3><p>Django通过自定义Python类的形式来定义具体的模型，每个模型的物理存在方式就是一个Python的类Class，每个模型代表数据库中的一张表，每个类的实例代表数据表中的一行数据，类中的每个变量代表数据表中的一列字段。Django通过模型，将Python代码和数据库操作结合起来，实现对SQL查询语言的封装。也就是说，你可以不会管理数据库，可以不会SQL语言，你同样能通过Python的代码进行数据库的操作，这就是所谓的ORM。</p><h4 id="1-连接MySQL数据库设置"><a href="#1-连接MySQL数据库设置" class="headerlink" title="(1)连接MySQL数据库设置"></a>(1)连接MySQL数据库设置</h4><p>默认情况下，配置使用SQLite。若不使用SQLite作为数据库，则需要额外的设置，例如 USER，PASSWORD和HOST必须加入。</p><p>其中ENGINE设置为数据库后端使用。内置数据库后端有：</p><blockquote><ul><li>‘django.db.backends.postgresql’</li><li>‘django.db.backends.mysql’</li><li>‘django.db.backends.sqlite3’</li><li>‘django.db.backends.oracle’</li></ul></blockquote><p>在myweb/settings.py文件中，通过DATABASES项进行数据库设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydemo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Django使用MySQL数据库需要加载 MySQLdb模块，需要安装 mysqlclient，若已经安装请略过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install  mysqlclient</span><br></pre></td></tr></table></figure><h4 id="2-创建模型"><a href="#2-创建模型" class="headerlink" title="(2)创建模型"></a>(2)创建模型</h4><p>在我们的简单的应用程序中，去创建一个stu表信息操作的Model类。</p><p>编辑 myapp/models.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义Stu表对应的Model类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 定义属性：默认主键自增id字段可不写</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.SmallIntegerField()</span><br><span class="line">    sex = models.CharField(max_length=<span class="number">1</span>)</span><br><span class="line">    classid=models.CharField(max_length=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义默认输出格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%s:%d:%s:%s&quot;</span>%(self.<span class="built_in">id</span>,self.name,self.age,self.sex,self.classid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义对应的表名，默认表名：myapp_stu</span></span><br><span class="line">    <span class="comment"># class Meta:</span></span><br><span class="line">        <span class="comment"># db_table=&quot;stu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-激活模型"><a href="#3-激活模型" class="headerlink" title="(3)激活模型"></a>(3)激活模型</h4><p>要将该应用程序包括在我们的项目中，我们需要在设置中添加对其配置类的引用INSTALLED_APPS。</p><p>该 myappConfig包是在myapp/apps.py文件中，所以它的虚线路径’myapp.apps.myappConfig’。</p><p>编辑myweb/settings.py文件，并将该虚线路径添加到该INSTALLED_APPS设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS  =  [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span> ，<span class="comment"># – 管理站点。你很快就会使用它。</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span> ，<span class="comment"># – 认证系统。</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span> ，<span class="comment"># – 内容类型框架。</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span> ， <span class="comment"># – 会话框架。</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span> ，<span class="comment"># – 消息传递框架。</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span> ，<span class="comment"># – 管理静态文件的框架。</span></span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>,  <span class="comment"># 新增，或者写虚线路径 myapp.apps.MyappConfig</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在 Django 知道要包含该应用程序。让我们运行另一个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations myapp</span><br></pre></td></tr></table></figure><p>通过运行<code>makemigrations</code>，您告诉 Django 您已经对模型进行了一些更改（在本例中，您已经创建了新模型）并且您希望将这些更改存储为<em>迁移</em>。</p><p><code>migrations</code>是Django保存模型修改记录的文件，这些文件保存在磁盘上。在例子中，它就是<code>polls/migrations/0001_initial.py</code>，你可以打开它看看，里面保存的都是人类可读并且可编辑的内容，方便你随时手动修改。</p><p>接下来有一个叫做<code>migrate</code>的命令将对数据库执行真正的迁移动作。</p><h4 id="4-使用模型"><a href="#4-使用模型" class="headerlink" title="(4)使用模型"></a>(4)使用模型</h4><p>在myapp应用的视图中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件：myapp/views.py 文件代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http  <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello Django!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">#获取所有stu表信息</span></span><br><span class="line">    lists = Stu.objects.<span class="built_in">all</span>()</span><br><span class="line">    print(lists)</span><br><span class="line">    <span class="comment">#获取单条学生信息</span></span><br><span class="line">    print(Stu.objects.get(<span class="built_in">id</span>=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>配置stu函数的访问路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在myapp/urls.py文件中配置</span></span><br><span class="line">path(<span class="string">&#x27;stu/&#x27;</span>, views.stu, name=<span class="string">&#x27;stu&#x27;</span>),</span><br></pre></td></tr></table></figure><p>启动服务后，在浏览器中访问,在命令行终端中查看输出效果: <a href="http://localhost:8000/myapp/stu">http://localhost:8000/myapp/stu</a></p><h3 id="启用网站Admin管理"><a href="#启用网站Admin管理" class="headerlink" title="启用网站Admin管理"></a>启用网站Admin管理</h3><h4 id="1-数据迁移"><a href="#1-数据迁移" class="headerlink" title="(1)数据迁移"></a>(1)数据迁移</h4><p>Django框架中有一个非常强大的应用功能–自动管理界面，常被Web平台管理者使用，去管理整个Web平台。</p><p>默认情况下，在settings.py配置文件中INSTALLED_APPS包含以下应用程序，这些应用程序都是由Django提供：</p><blockquote><ul><li>django.contrib.admin - 管理网站。你会很快使用它。</li><li>django.contrib.auth - 认证系统。</li><li>django.contrib.contenttypes - 内容类型的框架。</li><li>django.contrib.sessions - 会话框架</li><li>django.contrib.messages - 消息框架。</li><li>django.contrib.staticfiles - 管理静态文件的框架。</li></ul></blockquote><p>为了后续的开发，默认这些应用程序都是包含在里面的。</p><p>使用这些Django自带的应用程序，需要我们在数据库中创建一些数据表对应，然后才能使用它们。为此，请运行以下命令（数据结构迁移）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>其中该<code>migrate</code>命令查看该<code>INSTALLED_APPS</code>设置，并根据<code>myweb/settings.py</code>文件中的数据库设置和应用程序随附的数据库迁移创建任何必需的数据库表。您会看到适用于每个迁移的消息。</p><p>migrate命令对所有还未实施的迁移记录进行操作，本质上就是将你对模型的修改体现到数据库中具体的表中。Django通过一张叫做<code>django_migrations</code>的表，记录并跟踪已经实施的migrate动作，通过对比获得哪些迁移尚未提交。（请务必牢记这张表的作用和名称）</p><h4 id="2-创建管理员用户"><a href="#2-创建管理员用户" class="headerlink" title="(2). 创建管理员用户"></a>(2). 创建管理员用户</h4><p>首先，我们需要创建一个可以登录管理站点的用户。运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入您所需的用户名，然后按Enter键。</span></span><br><span class="line">Username: admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后将提示您输入所需的电子邮件地址：</span></span><br><span class="line">Email address: admin@example.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后一步是输入你的密码（&gt;=8位）。您将被要求输入密码两次，第二次作为第一次的确认</span></span><br><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p><strong>启动开发服务器</strong></p><p>默认情况下，Django管理员站点被激活。让我们开始开发服务器并探索它。</p><p>启动开发服务器命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line">或</span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>现在，打开一个Web浏览器，访问地址： <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><h4 id="3-设置时区和语言："><a href="#3-设置时区和语言：" class="headerlink" title="(3). 设置时区和语言："></a>(3). 设置时区和语言：</h4><p>编辑myweb/settings.py配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span><span class="comment"># 简体中文</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span><span class="comment"># 上海时区</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-将我们自定义的应用程序的加入到后台管理"><a href="#4-将我们自定义的应用程序的加入到后台管理" class="headerlink" title="(4). 将我们自定义的应用程序的加入到后台管理"></a>(4). 将我们自定义的应用程序的加入到后台管理</h4><p>但我们的自定义应用程序在哪里？并没有显示在后台管理索引页面上。</p><p>要做到这一点，打开myapp/admin.py 文件，并编辑代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu<span class="comment"># 新增</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Stu)<span class="comment"># 新增</span></span><br></pre></td></tr></table></figure><h4 id="5-更深入设计后台管理"><a href="#5-更深入设计后台管理" class="headerlink" title="(5)更深入设计后台管理"></a>(5)更深入设计后台管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑myapp/models.py文件，在Stu类中添加如下信息，让后台管理显示中文字段。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义Stu表对应的Model类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#定义属性：默认主键自增id字段可不写</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&quot;学号&quot;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&quot;姓名&quot;</span>,max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.SmallIntegerField(<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    sex = models.CharField(<span class="string">&quot;性别&quot;</span>,max_length=<span class="number">1</span>)</span><br><span class="line">    classid=models.CharField(<span class="string">&quot;班级&quot;</span>,max_length=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义默认输出格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%s:%d:%s:%s&quot;</span>%(self.<span class="built_in">id</span>,self.name,self.age,self.sex,self.classid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义对应的表名，默认表名：myapp_stu</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">&quot;stu&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;浏览学生信息&#x27;</span>  </span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;学生信息管理&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑myapp/admin.py 文件，实现信息管理的个性化定制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu</span><br><span class="line"></span><br><span class="line"><span class="comment">#Stu模型的管理器(装饰器写法)</span></span><br><span class="line"><span class="meta">@admin.register(Stu)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StuAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="comment">#listdisplay设置要显示在列表中的字段（id字段是Django模型的默认主键）</span></span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;classid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置哪些字段可以点击进入编辑界面</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#list_per_page设置每页显示多少条记录，默认是100条</span></span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#ordering设置默认排序字段，负号表示降序排序</span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment">#-id降序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#list_editable 设置默认可编辑字段</span></span><br><span class="line">    <span class="comment">#list_editable = [&#x27;age&#x27;,&#x27;sex&#x27;,&#x27;classid&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#其他请详见手册文档说明</span></span><br></pre></td></tr></table></figure><h3 id="应用目录"><a href="#应用目录" class="headerlink" title="应用目录"></a>应用目录</h3><p><strong>良好的目录结构是每个应用都应该创建自己的urls、forms、views、models、tests、apps、templates和static，每个templates包含一个与应用同名的子目录，每个static也包含一个与应用同名的子目录。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Django" scheme="https://www.orangecola.cn/categories/Django/"/>
    
    
    <category term="Django" scheme="https://www.orangecola.cn/tags/Django/"/>
    
  </entry>
  
</feed>
