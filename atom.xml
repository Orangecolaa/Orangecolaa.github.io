<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orangecola</title>
  
  <subtitle>I am your Orangecola</subtitle>
  <link href="https://www.orangecola.cn/atom.xml" rel="self"/>
  
  <link href="https://www.orangecola.cn/"/>
  <updated>2021-09-02T07:31:55.172Z</updated>
  <id>https://www.orangecola.cn/</id>
  
  <author>
    <name>Orange cola</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.orangecola.cn/posts/4a17b156/"/>
    <id>https://www.orangecola.cn/posts/4a17b156/</id>
    <published>2021-09-02T07:31:55.172Z</published>
    <updated>2021-09-02T07:31:55.172Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Django初步</title>
    <link href="https://www.orangecola.cn/posts/6fd05540/"/>
    <id>https://www.orangecola.cn/posts/6fd05540/</id>
    <published>2021-09-01T20:20:00.000Z</published>
    <updated>2021-09-02T07:31:55.172Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Django初步"><a href="#Django初步" class="headerlink" title="Django初步"></a>Django初步</h1><h2 id="Web框架中的一些概念"><a href="#Web框架中的一些概念" class="headerlink" title="Web框架中的一些概念"></a>Web框架中的一些概念</h2><ul><li>MVC<ul><li>大部分开发语言中都有MVC框架</li><li>MVC框架的核心思想是：解耦</li><li>降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现代码的重用</li><li>m表示model，主要用于对数据库层的封装</li><li>v表示view，用于向用户展示结果</li><li>c表示controller，是核心，用于处理请求、获取数据、返回结果</li></ul></li><li>MVT<ul><li>Django是一款python的web开发框架</li><li>与MVC有所不同，属于MVT框架</li><li>m表示model，负责与数据库交互</li><li>v表示view，是核心，负责接收请求、获取数据、返回结果</li><li>t表示template，负责呈现内容到浏览器</li></ul></li></ul><h2 id="Django框架介绍"><a href="#Django框架介绍" class="headerlink" title="Django框架介绍"></a>Django框架介绍</h2><ul><li>Django是一个高级的Python Web框架，它鼓励快速开发和清洁，务实的设计。</li><li>由经验丰富的开发人员构建，它负责Web开发的许多麻烦，因此您可以专注于编写应用程序，而无需重新创建轮子。</li><li>它是免费的和开源的。</li><li>被官方称之为完美主义者的Web框架。</li><li>Django可以更快地构建更好的Web应用程序并减少代码。</li></ul><h3 id="Django框架的特点"><a href="#Django框架的特点" class="headerlink" title="Django框架的特点"></a>Django框架的特点</h3><ul><li>快速开发：Django的宗旨在于帮助开发人员快速从概念到完成应用程序。</li><li>安全可靠：Django认真对待安全性，帮助开发人员避免许多常见的安全错误。</li><li>超可伸缩性：Web上的一些最繁忙的网站利用了Django快速灵活扩展的能力。</li></ul><h3 id="Django可以使用什么Python版本？"><a href="#Django可以使用什么Python版本？" class="headerlink" title="Django可以使用什么Python版本？"></a>Django可以使用什么Python版本？</h3><table><thead><tr><th align="left">Django版本</th><th align="left">Python版本</th></tr></thead><tbody><tr><td align="left">2.2</td><td align="left">3.5、3.6、3.7、3.8（在2.2.8中添加）</td></tr><tr><td align="left">3.0、3.1、3.2</td><td align="left">3.6、3.7、3.8</td></tr></tbody></table><ul><li>Django的开发版本</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/release-roadmap.e844db08610e.png" alt="img"></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://typora101.oss-cn-shenzhen.aliyuncs.com/typora/img/22.png" alt="img"></h3><h2 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h2><ul><li>作为Python Web框架，Django需要Python，在安装Python同时需要安装pip。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认安装最新版</span></span><br><span class="line">pip install django</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以指定版本</span></span><br><span class="line">pip install django==3.2.*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测当前是否安装Django及版本</span></span><br><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><h2 id="Django的快速入门体验"><a href="#Django的快速入门体验" class="headerlink" title="Django的快速入门体验"></a>Django的快速入门体验</h2><h3 id="Django项目创建和运行"><a href="#Django项目创建和运行" class="headerlink" title="Django项目创建和运行"></a>Django项目创建和运行</h3><p>如果这是你第一次使用Django，那么你必须要照顾一些初始设置。也就是说，您需要自动生成一些建立Django 项目的代码</p><p>从命令行cd到您要存储代码的目录，然后运行以下命令.</p><h4 id="1-创建项目："><a href="#1-创建项目：" class="headerlink" title="(1)创建项目："></a>(1)创建项目：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajango-admin startproject myweb</span><br></pre></td></tr></table></figure><p>我们来看看startproject创建的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost myweb]# tree</span><br><span class="line">.</span><br><span class="line">├── manage.py</span><br><span class="line">└── myweb</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><p><strong>关于上面自动生成的目录与文件解释如下：</strong></p><ul><li>外部myweb/根目录只是一个项目的容器。它的名字与Django无关; 您可以将其重命名为您喜欢的任何内容。</li><li>manage.py：一个命令行实用程序，可以让您以各种方式与此Django项目进行交互。你可以阅读所有的细节 manage.py在Django的管理和manage.py。</li><li>内部mysite/目录是您的项目的实际Python包。它的名字是您需要用来导入其中的任何内容的Python包名称（例如mysite.urls）。</li><li>mysite/<strong>init</strong>.py：一个空的文件，告诉Python这个目录应该被认为是一个Python包。</li><li>mysite/settings.py：此Django项目的设置/配置。 Django设置会告诉你所有关于设置的工作原理。</li><li>mysite/urls.py：该Django项目的URL声明; 您的Django动力网站的“目录”。</li><li>mysite/wsgi.py：WSGI兼容的Web服务器为您的项目提供服务的入口点。</li></ul><h4 id="2-运行开发服务器："><a href="#2-运行开发服务器：" class="headerlink" title="(2)运行开发服务器："></a>(2)运行开发服务器：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程访问</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8000/%E6%97%A2%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5%E3%80%82">http://127.0.0.1:8000/既可以查看测试网页。</a></p><p>默认情况下，该runserver命令在端口8000的内部IP上启动开发服务器。当然也可以指定端口开启服务,如8080端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure><h4 id="3-创建一个应用程序："><a href="#3-创建一个应用程序：" class="headerlink" title="(3)创建一个应用程序："></a>(3)创建一个应用程序：</h4><p>Django自带一个实用程序，可以自动生成应用程序的基本目录结构，因此您可以专注于编写代码而不是创建目录。</p><p>要创建您的应用程序，请确保您与目录位于同一目录，manage.py 并键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure><p>这将创建一个目录myapp，其目录如下：此目录结构将容纳轮询应用程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost demo]# tree myweb/</span><br><span class="line">myweb/</span><br><span class="line">├── manage.py</span><br><span class="line">├── myweb</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── myapp</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure><h3 id="Django的视图和函数"><a href="#Django的视图和函数" class="headerlink" title="Django的视图和函数"></a>Django的视图和函数</h3><h4 id="定义我们的第一个视图"><a href="#定义我们的第一个视图" class="headerlink" title="定义我们的第一个视图"></a>定义我们的第一个视图</h4><p>我们来写第一个视图。打开文件myapp/views.py 并放入以下Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world.&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是Django中最简单的视图。要调用视图，我们需要将其映射到一个URL。为此，我们需要一个URLconf。</p><p>要在myapp目录中创建一个URLconf，创建一个名为urls.py。</p><p><strong>在myapp/urls.py文件中包含以下代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下一步是将根URLconf指向myapp.urls模块。 在 myweb/urls.py添加一条import用于django.urls.include和插入include()的urlpatterns列表，<strong>所以你必须打开myweb下的urls写入子urls文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include,path <span class="comment"># 新增</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    path(<span class="string">&#x27;myweb/&#x27;</span>, include(<span class="string">&#x27;myapp.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中include()函数允许引用其他URLconfs。请注意，该include()函数的正则表达式 没有$（字符串匹配字符），而是尾部的斜杠。 每当Django遇到时 include()，它会排除与该点匹配的任何部分，并将剩余的字符串发送到随附的URLconf进行进一步处理。</p><p>您现在已将index视图连接到URLconf中。</p><p><strong>重新运行或刷新页面验证它的工作：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中转到http:// localhost：8000 / myweb /，您应该看到页面出现文本：”Hello, world. “</p><h3 id="项目的模型"><a href="#项目的模型" class="headerlink" title="项目的模型"></a>项目的模型</h3><h4 id="1-连接MySQL数据库设置"><a href="#1-连接MySQL数据库设置" class="headerlink" title="(1)连接MySQL数据库设置"></a>(1)连接MySQL数据库设置</h4><p>默认情况下，配置使用SQLite。若不使用SQLite作为数据库，则需要额外的设置，例如 USER，PASSWORD和HOST必须加入。</p><p>其中ENGINE设置为数据库后端使用。内置数据库后端有：</p><blockquote><ul><li>‘django.db.backends.postgresql’</li><li>‘django.db.backends.mysql’</li><li>‘django.db.backends.sqlite3’</li><li>‘django.db.backends.oracle’</li></ul></blockquote><p>在myweb/settings.py文件中，通过DATABASES项进行数据库设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydemo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Django使用MySQL数据库需要加载 MySQLdb模块，需要安装 mysqlclient，若已经安装请略过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install  mysqlclient</span><br></pre></td></tr></table></figure><h4 id="2-创建模型"><a href="#2-创建模型" class="headerlink" title="(2)创建模型"></a>(2)创建模型</h4><p>在我们的简单的应用程序中，去创建一个stu表信息操作的Model类。</p><p>编辑 myapp/models.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义Stu表对应的Model类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 定义属性：默认主键自增id字段可不写</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.SmallIntegerField()</span><br><span class="line">    sex = models.CharField(max_length=<span class="number">1</span>)</span><br><span class="line">    classid=models.CharField(max_length=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义默认输出格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%s:%d:%s:%s&quot;</span>%(self.<span class="built_in">id</span>,self.name,self.age,self.sex,self.classid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义对应的表名，默认表名：myapp_stu</span></span><br><span class="line">    <span class="comment"># class Meta:</span></span><br><span class="line">        <span class="comment"># db_table=&quot;stu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-激活模型"><a href="#3-激活模型" class="headerlink" title="(3)激活模型"></a>(3)激活模型</h4><p>要将该应用程序包括在我们的项目中，我们需要在设置中添加对其配置类的引用INSTALLED_APPS。</p><p>该 myappConfig包是在myapp/apps.py文件中，所以它的虚线路径’myapp.apps.myappConfig’。</p><p>编辑myweb/settings.py文件，并将该虚线路径添加到该INSTALLED_APPS设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS  =  [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span> ，</span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>,  <span class="comment"># 新增，或者写 myapp.apps.MyappConfig</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4-使用模型"><a href="#4-使用模型" class="headerlink" title="(4)使用模型"></a>(4)使用模型</h4><p>在myapp应用的视图中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件：myapp/views.py 文件代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http  <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello Django!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">#获取所有stu表信息</span></span><br><span class="line">    lists = Stu.objects.<span class="built_in">all</span>()</span><br><span class="line">    print(lists)</span><br><span class="line">    <span class="comment">#获取单条学生信息</span></span><br><span class="line">    print(Stu.objects.get(<span class="built_in">id</span>=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>配置stu函数的访问路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在myapp/urls.py文件中配置</span></span><br><span class="line">path(<span class="string">&#x27;stu/&#x27;</span>, views.stu, name=<span class="string">&#x27;stu&#x27;</span>),</span><br></pre></td></tr></table></figure><p>启动服务后，在浏览器中访问,在命令行终端中查看输出效果: <a href="http://localhost:8000/myapp/stu">http://localhost:8000/myapp/stu</a></p><h3 id="启用网站Admin管理"><a href="#启用网站Admin管理" class="headerlink" title="启用网站Admin管理"></a>启用网站Admin管理</h3><h4 id="1-数据迁移"><a href="#1-数据迁移" class="headerlink" title="(1)数据迁移"></a>(1)数据迁移</h4><p>Django框架中有一个非常强大的应用功能–自动管理界面，常被Web平台管理者使用，去管理整个Web平台。</p><p>默认情况下，在settings.py配置文件中INSTALLED_APPS包含以下应用程序，这些应用程序都是由Django提供：</p><blockquote><ul><li>django.contrib.admin - 管理网站。你会很快使用它。</li><li>django.contrib.auth - 认证系统。</li><li>django.contrib.contenttypes - 内容类型的框架。</li><li>django.contrib.sessions - 会话框架</li><li>django.contrib.messages - 消息框架。</li><li>django.contrib.staticfiles - 管理静态文件的框架。</li></ul></blockquote><p>为了后续的开发，默认这些应用程序都是包含在里面的。</p><p>使用这些Django自带的应用程序，需要我们在数据库中创建一些数据表对应，然后才能使用它们。为此，请运行以下命令（数据结构迁移）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>其中该<code>migrate</code>命令查看该<code>INSTALLED_APPS</code>设置，并根据<code>myweb/settings.py</code>文件中的数据库设置和应用程序随附的数据库迁移创建任何必需的数据库表。您会看到适用于每个迁移的消息。</p><h4 id="2-创建管理员用户"><a href="#2-创建管理员用户" class="headerlink" title="(2). 创建管理员用户"></a>(2). 创建管理员用户</h4><p>首先，我们需要创建一个可以登录管理站点的用户。运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入您所需的用户名，然后按Enter键。</span></span><br><span class="line">Username: admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后将提示您输入所需的电子邮件地址：</span></span><br><span class="line">Email address: admin@example.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后一步是输入你的密码（&gt;=8位）。您将被要求输入密码两次，第二次作为第一次的确认</span></span><br><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p><strong>启动开发服务器</strong></p><p>默认情况下，Django管理员站点被激活。让我们开始开发服务器并探索它。</p><p>启动开发服务器命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line">或</span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>现在，打开一个Web浏览器，访问地址： <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><h4 id="3-设置时区和语言："><a href="#3-设置时区和语言：" class="headerlink" title="(3). 设置时区和语言："></a>(3). 设置时区和语言：</h4><p>编辑myweb/settings.py配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span><span class="comment"># 简体中文</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span><span class="comment"># 上海时区</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-将我们自定义的应用程序的加入到后台管理"><a href="#4-将我们自定义的应用程序的加入到后台管理" class="headerlink" title="(4). 将我们自定义的应用程序的加入到后台管理"></a>(4). 将我们自定义的应用程序的加入到后台管理</h4><p>但我们的自定义应用程序在哪里？并没有显示在后台管理索引页面上。</p><p>要做到这一点，打开myapp/admin.py 文件，并编辑代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu<span class="comment"># 新增</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Stu)<span class="comment"># 新增</span></span><br></pre></td></tr></table></figure><h4 id="5-更深入设计后台管理"><a href="#5-更深入设计后台管理" class="headerlink" title="(5)更深入设计后台管理"></a>(5)更深入设计后台管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑myapp/models.py文件，在Stu类中添加如下信息，让后台管理显示中文字段。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义Stu表对应的Model类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#定义属性：默认主键自增id字段可不写</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&quot;学号&quot;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&quot;姓名&quot;</span>,max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.SmallIntegerField(<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    sex = models.CharField(<span class="string">&quot;性别&quot;</span>,max_length=<span class="number">1</span>)</span><br><span class="line">    classid=models.CharField(<span class="string">&quot;班级&quot;</span>,max_length=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义默认输出格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%s:%d:%s:%s&quot;</span>%(self.<span class="built_in">id</span>,self.name,self.age,self.sex,self.classid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义对应的表名，默认表名：myapp_stu</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">&quot;stu&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;浏览学生信息&#x27;</span>  </span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;学生信息管理&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑myapp/admin.py 文件，实现信息管理的个性化定制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Stu</span><br><span class="line"></span><br><span class="line"><span class="comment">#Stu模型的管理器(装饰器写法)</span></span><br><span class="line"><span class="meta">@admin.register(Stu)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StuAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="comment">#listdisplay设置要显示在列表中的字段（id字段是Django模型的默认主键）</span></span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;classid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置哪些字段可以点击进入编辑界面</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#list_per_page设置每页显示多少条记录，默认是100条</span></span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#ordering设置默认排序字段，负号表示降序排序</span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment">#-id降序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#list_editable 设置默认可编辑字段</span></span><br><span class="line">    <span class="comment">#list_editable = [&#x27;age&#x27;,&#x27;sex&#x27;,&#x27;classid&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#其他请详见手册文档说明</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Django" scheme="https://www.orangecola.cn/categories/Django/"/>
    
    
    <category term="Django" scheme="https://www.orangecola.cn/tags/Django/"/>
    
  </entry>
  
</feed>
